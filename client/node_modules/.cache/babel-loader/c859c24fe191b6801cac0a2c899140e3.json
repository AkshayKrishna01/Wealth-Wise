{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\Linegraph\\\\Line.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n/**\r\n * LineGraph Component\r\n * \r\n * @param {Array} expenses - Array of expense objects.\r\n *   Each expense object should include:\r\n *     - date: a date string (ISO format recommended, e.g., \"2025-01-20T00:00:00.000Z\")\r\n *     - amount: a numeric value for the expense amount\r\n */\n\nconst LineGraph = _ref => {\n  let {\n    expenses = []\n  } = _ref;\n\n  // Returns an array of 7 ISO date strings (Monday to Sunday) for the current week.\n  const getCurrentWeekDates = () => {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\n    // Calculate Monday: if today is Sunday (0), go back 6 days; otherwise, back (dayOfWeek - 1) days.\n\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - (dayOfWeek + 6) % 7);\n    const weekDates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(monday);\n      currentDate.setDate(monday.getDate() + i); // Push date in \"yyyy-mm-dd\" format.\n\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\n    }\n\n    return weekDates;\n  }; // Computes week labels and the summed expense amounts for each day of the week.\n\n\n  const getWeekData = () => {\n    const weekDates = getCurrentWeekDates(); // Sum expenses for each day of the week.\n\n    const weekData = weekDates.map(dateStr => {\n      return expenses.reduce((sum, expense) => {\n        // Compare only the date portion (before the \"T\")\n        const expenseDate = expense.date.split(\"T\")[0];\n        return expenseDate === dateStr ? sum + expense.amount : sum;\n      }, 0);\n    }); // Format labels as \"Day(dd|mm|yyyy)\"\n\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const weekLabels = weekDates.map((dateStr, index) => {\n      const d = new Date(dateStr);\n      const day = d.getDate();\n      const month = String(d.getMonth() + 1).padStart(2, \"0\");\n      const year = d.getFullYear();\n      return `${dayNames[index]}(${day}|${month}|${year})`;\n    });\n    return {\n      weekLabels,\n      weekData\n    };\n  };\n\n  const {\n    weekLabels,\n    weekData\n  } = getWeekData(); // Prepare chart data for Chart.js.\n\n  const chartData = {\n    labels: weekLabels,\n    datasets: [{\n      label: \"Weekly Spending\",\n      data: weekData,\n      borderColor: \"rgb(75,192,197)\",\n      backgroundColor: \"rgba(75,192,197,0.2)\",\n      tension: 0.4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.line,\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/Linegraph/Line.js"],"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","LineGraph","expenses","getCurrentWeekDates","today","Date","dayOfWeek","getDay","monday","setDate","getDate","weekDates","i","currentDate","push","toISOString","split","getWeekData","weekData","map","dateStr","reduce","sum","expense","expenseDate","date","amount","dayNames","weekLabels","index","d","day","month","String","getMonth","padStart","year","getFullYear","chartData","labels","datasets","label","data","borderColor","backgroundColor","tension","styles","line"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n/**\r\n * LineGraph Component\r\n * \r\n * @param {Array} expenses - Array of expense objects.\r\n *   Each expense object should include:\r\n *     - date: a date string (ISO format recommended, e.g., \"2025-01-20T00:00:00.000Z\")\r\n *     - amount: a numeric value for the expense amount\r\n */\r\nconst LineGraph = ({ expenses = [] }) => {\r\n  // Returns an array of 7 ISO date strings (Monday to Sunday) for the current week.\r\n  const getCurrentWeekDates = () => {\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\r\n    // Calculate Monday: if today is Sunday (0), go back 6 days; otherwise, back (dayOfWeek - 1) days.\r\n    const monday = new Date(today);\r\n    monday.setDate(today.getDate() - ((dayOfWeek + 6) % 7));\r\n\r\n    const weekDates = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(monday);\r\n      currentDate.setDate(monday.getDate() + i);\r\n      // Push date in \"yyyy-mm-dd\" format.\r\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\r\n    }\r\n    return weekDates;\r\n  };\r\n\r\n  // Computes week labels and the summed expense amounts for each day of the week.\r\n  const getWeekData = () => {\r\n    const weekDates = getCurrentWeekDates();\r\n\r\n    // Sum expenses for each day of the week.\r\n    const weekData = weekDates.map((dateStr) => {\r\n      return expenses.reduce((sum, expense) => {\r\n        // Compare only the date portion (before the \"T\")\r\n        const expenseDate = expense.date.split(\"T\")[0];\r\n        return expenseDate === dateStr ? sum + expense.amount : sum;\r\n      }, 0);\r\n    });\r\n\r\n    // Format labels as \"Day(dd|mm|yyyy)\"\r\n    const dayNames = [\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n    ];\r\n    const weekLabels = weekDates.map((dateStr, index) => {\r\n      const d = new Date(dateStr);\r\n      const day = d.getDate();\r\n      const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n      const year = d.getFullYear();\r\n      return `${dayNames[index]}(${day}|${month}|${year})`;\r\n    });\r\n\r\n    return { weekLabels, weekData };\r\n  };\r\n\r\n  const { weekLabels, weekData } = getWeekData();\r\n\r\n  // Prepare chart data for Chart.js.\r\n  const chartData = {\r\n    labels: weekLabels,\r\n    datasets: [\r\n      {\r\n        label: \"Weekly Spending\",\r\n        data: weekData,\r\n        borderColor: \"rgb(75,192,197)\",\r\n        backgroundColor: \"rgba(75,192,197,0.2)\",\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className={styles.line}>\r\n      <Line data={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n"]},"metadata":{},"sourceType":"module"}