{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Linegraph\\\\Line.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\"; // Register ChartJS components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [graphData, setGraphData] = useState([]);\n  const [error, setError] = useState(\"\"); // API base URL\n\n  const apiUrl = \"http://localhost:8080/api\"; // Helper to attach auth header (if token is required)\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    };\n  }; // Fetch aggregated daily expense data when the component mounts\n\n\n  useEffect(() => {\n    fetchGraphData();\n  }, []);\n\n  const fetchGraphData = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/expense/graph/daily`, {\n        headers: getAuthHeaders()\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch aggregated daily expense data\");\n      }\n\n      const data = await res.json();\n      console.log(\"Aggregated daily data:\", data);\n      setGraphData(data);\n    } catch (err) {\n      console.error(\"Error fetching aggregated daily data:\", err);\n      setError(err.message || \"Failed to fetch aggregated daily expense data\");\n    }\n  }; // Compute the current week's dates (Monday to Sunday) in ISO format (yyyy-mm-dd)\n\n\n  const getCurrentWeekDates = () => {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\n    // For calculation, treat Sunday as 7 so Monday is calculated correctly.\n\n    const offset = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - offset);\n    const weekDates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(monday);\n      currentDate.setDate(monday.getDate() + i);\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\n    }\n\n    return weekDates;\n  }; // Generate week labels and data for the graph using the aggregated data\n\n\n  const getWeekData = () => {\n    const weekDates = getCurrentWeekDates(); // For each date, look for a matching entry in graphData; if none, use 0.\n\n    const weekData = weekDates.map(dateStr => {\n      const entry = graphData.find(item => item._id === dateStr);\n      return entry ? entry.totalAmount : 0;\n    }); // Format labels as \"Day(dd|mm|yyyy)\"\n\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const weekLabels = weekDates.map((dateStr, index) => {\n      const d = new Date(dateStr);\n      const day = d.getDate();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const year = d.getFullYear();\n      return `${dayNames[index]}(${day}|${month}|${year})`;\n    });\n    return {\n      weekLabels,\n      weekData\n    };\n  };\n\n  const {\n    weekLabels,\n    weekData\n  } = getWeekData();\n  const chartData = {\n    labels: weekLabels,\n    datasets: [{\n      label: \"Weekly Spending\",\n      data: weekData,\n      borderColor: \"black\",\n      backgroundColor: \"rgba(75,192,197,0.2)\",\n      tension: 0.4\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Allow custom height\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Daily Expense Graph\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.line,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Daily, \"ZDmp+wpJch2cv0JAPmOEixyXuOc=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Linegraph/Line.js"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","graphData","setGraphData","error","setError","apiUrl","getAuthHeaders","token","localStorage","getItem","fetchGraphData","res","fetch","headers","ok","Error","data","json","console","log","err","message","getCurrentWeekDates","today","Date","dayOfWeek","getDay","offset","monday","setDate","getDate","weekDates","i","currentDate","push","toISOString","split","getWeekData","weekData","map","dateStr","entry","find","item","_id","totalAmount","dayNames","weekLabels","index","d","day","month","String","getMonth","padStart","year","getFullYear","chartData","labels","datasets","label","borderColor","backgroundColor","tension","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","line","height"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport styles from \"./style.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register ChartJS components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function Daily() {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // API base URL\r\n  const apiUrl = \"http://localhost:8080/api\";\r\n\r\n  // Helper to attach auth header (if token is required)\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${token}`,\r\n    };\r\n  };\r\n\r\n  // Fetch aggregated daily expense data when the component mounts\r\n  useEffect(() => {\r\n    fetchGraphData();\r\n  }, []);\r\n\r\n  const fetchGraphData = async () => {\r\n    try {\r\n      const res = await fetch(`${apiUrl}/expense/graph/daily`, {\r\n        headers: getAuthHeaders(),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to fetch aggregated daily expense data\");\r\n      }\r\n      const data = await res.json();\r\n      console.log(\"Aggregated daily data:\", data);\r\n      setGraphData(data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching aggregated daily data:\", err);\r\n      setError(err.message || \"Failed to fetch aggregated daily expense data\");\r\n    }\r\n  };\r\n\r\n  // Compute the current week's dates (Monday to Sunday) in ISO format (yyyy-mm-dd)\r\n  const getCurrentWeekDates = () => {\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\r\n    // For calculation, treat Sunday as 7 so Monday is calculated correctly.\r\n    const offset = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\r\n    const monday = new Date(today);\r\n    monday.setDate(today.getDate() - offset);\r\n\r\n    const weekDates = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(monday);\r\n      currentDate.setDate(monday.getDate() + i);\r\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\r\n    }\r\n    return weekDates;\r\n  };\r\n\r\n  // Generate week labels and data for the graph using the aggregated data\r\n  const getWeekData = () => {\r\n    const weekDates = getCurrentWeekDates();\r\n\r\n    // For each date, look for a matching entry in graphData; if none, use 0.\r\n    const weekData = weekDates.map(dateStr => {\r\n      const entry = graphData.find(item => item._id === dateStr);\r\n      return entry ? entry.totalAmount : 0;\r\n    });\r\n\r\n    // Format labels as \"Day(dd|mm|yyyy)\"\r\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n    const weekLabels = weekDates.map((dateStr, index) => {\r\n      const d = new Date(dateStr);\r\n      const day = d.getDate();\r\n      const month = String(d.getMonth() + 1).padStart(2, '0');\r\n      const year = d.getFullYear();\r\n      return `${dayNames[index]}(${day}|${month}|${year})`;\r\n    });\r\n\r\n    return { weekLabels, weekData };\r\n  };\r\n\r\n  const { weekLabels, weekData } = getWeekData();\r\n\r\n  const chartData = {\r\n    labels: weekLabels,\r\n    datasets: [{\r\n      label: \"Weekly Spending\",\r\n      data: weekData,\r\n      borderColor: \"black\",\r\n      backgroundColor: \"rgba(75,192,197,0.2)\",\r\n      tension: 0.4,\r\n    }],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, // Allow custom height\r\n    plugins: {\r\n      legend: { position: \"top\" },\r\n      title: { display: true, text: \"Daily Expense Graph\" },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.line}>\r\n      {error && <p>{error}</p>}\r\n      {/* Wrap the Line chart in a div with a fixed height */}\r\n      <div style={{ height: \"400px\" }}>\r\n        <Line data={chartData} options={chartOptions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}