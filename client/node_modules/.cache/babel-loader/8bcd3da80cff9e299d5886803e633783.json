{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Linegraph\\\\Line.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\"); // API base URL\n\n  const apiUrl = \"http://localhost:8080/api\"; // Helper to get auth headers (if using JWT authentication)\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return token ? {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    } : {\n      \"Content-Type\": \"application/json\"\n    };\n  };\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Fetch all expenses and then filter for daily expenses\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/expense`, {\n        headers: getAuthHeaders()\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      console.log(\"Fetched expenses:\", data); // Filter only \"Daily\" expenses\n\n      const dailyExpenses = data.filter(expense => expense.expenseType === \"Daily\");\n      console.log(\"Daily expenses:\", dailyExpenses);\n      setExpenses(dailyExpenses);\n    } catch (err) {\n      console.error(\"Error fetching expenses:\", err);\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Computes the current week's Monday and returns an array of 7 ISO date strings (Monday to Sunday)\n\n\n  const getCurrentWeekDates = () => {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\n    // Calculate Monday (if today is Sunday, go back 6 days)\n\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - (dayOfWeek + 6) % 7);\n    const weekDates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(monday);\n      currentDate.setDate(monday.getDate() + i);\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\n    }\n\n    return weekDates;\n  }; // Generate week labels and aggregate data from the daily expenses\n\n\n  const getWeekData = () => {\n    const weekDates = getCurrentWeekDates(); // Sum expenses for each day of the week.\n\n    const weekData = weekDates.map(dateStr => {\n      const dailyTotal = expenses.reduce((sum, expense) => {\n        // Convert expense.date to ISO format for accurate comparison.\n        const expenseDate = new Date(expense.date).toISOString().split(\"T\")[0];\n        return expenseDate === dateStr ? sum + expense.amount : sum;\n      }, 0);\n      return dailyTotal;\n    }); // Format labels as \"Day(dd|mm|yyyy)\"\n\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const weekLabels = weekDates.map((dateStr, index) => {\n      const d = new Date(dateStr);\n      const day = d.getDate();\n      const month = String(d.getMonth() + 1).padStart(2, \"0\");\n      const year = d.getFullYear();\n      return `${dayNames[index]}(${day}|${month}|${year})`;\n    });\n    console.log(\"Week Labels:\", weekLabels);\n    console.log(\"Week Data:\", weekData);\n    return {\n      weekLabels,\n      weekData\n    };\n  };\n\n  const {\n    weekLabels,\n    weekData\n  } = getWeekData();\n  const chartData = {\n    labels: weekLabels,\n    datasets: [{\n      label: \"Weekly Spending\",\n      data: weekData,\n      borderColor: \"black\",\n      backgroundColor: \"yellow\",\n      tension: 0.1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Daily Expenses for the Current Week\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.line,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Daily, \"Sh9M8s/WlxvERYptKn198liF/BM=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Linegraph/Line.js"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","expenses","setExpenses","error","setError","apiUrl","getAuthHeaders","token","localStorage","getItem","fetchExpenses","res","fetch","headers","ok","Error","data","json","console","log","dailyExpenses","filter","expense","expenseType","err","message","getCurrentWeekDates","today","Date","dayOfWeek","getDay","monday","setDate","getDate","weekDates","i","currentDate","push","toISOString","split","getWeekData","weekData","map","dateStr","dailyTotal","reduce","sum","expenseDate","date","amount","dayNames","weekLabels","index","d","day","month","String","getMonth","padStart","year","getFullYear","chartData","labels","datasets","label","borderColor","backgroundColor","tension","chartOptions","responsive","plugins","legend","position","title","display","text","line"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport styles from \"./style.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function Daily() {\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // API base URL\r\n  const apiUrl = \"http://localhost:8080/api\";\r\n\r\n  // Helper to get auth headers (if using JWT authentication)\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return token\r\n      ? { \"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${token}` }\r\n      : { \"Content-Type\": \"application/json\" };\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchExpenses();\r\n  }, []);\r\n\r\n  // Fetch all expenses and then filter for daily expenses\r\n  const fetchExpenses = async () => {\r\n    try {\r\n      const res = await fetch(`${apiUrl}/expense`, { headers: getAuthHeaders() });\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to fetch expenses\");\r\n      }\r\n      const data = await res.json();\r\n      console.log(\"Fetched expenses:\", data);\r\n      // Filter only \"Daily\" expenses\r\n      const dailyExpenses = data.filter(\r\n        (expense) => expense.expenseType === \"Daily\"\r\n      );\r\n      console.log(\"Daily expenses:\", dailyExpenses);\r\n      setExpenses(dailyExpenses);\r\n    } catch (err) {\r\n      console.error(\"Error fetching expenses:\", err);\r\n      setError(err.message || \"Failed to fetch expenses\");\r\n    }\r\n  };\r\n\r\n  // Computes the current week's Monday and returns an array of 7 ISO date strings (Monday to Sunday)\r\n  const getCurrentWeekDates = () => {\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\r\n    // Calculate Monday (if today is Sunday, go back 6 days)\r\n    const monday = new Date(today);\r\n    monday.setDate(today.getDate() - ((dayOfWeek + 6) % 7));\r\n\r\n    const weekDates = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(monday);\r\n      currentDate.setDate(monday.getDate() + i);\r\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\r\n    }\r\n    return weekDates;\r\n  };\r\n\r\n  // Generate week labels and aggregate data from the daily expenses\r\n  const getWeekData = () => {\r\n    const weekDates = getCurrentWeekDates();\r\n\r\n    // Sum expenses for each day of the week.\r\n    const weekData = weekDates.map((dateStr) => {\r\n      const dailyTotal = expenses.reduce((sum, expense) => {\r\n        // Convert expense.date to ISO format for accurate comparison.\r\n        const expenseDate = new Date(expense.date).toISOString().split(\"T\")[0];\r\n        return expenseDate === dateStr ? sum + expense.amount : sum;\r\n      }, 0);\r\n      return dailyTotal;\r\n    });\r\n\r\n    // Format labels as \"Day(dd|mm|yyyy)\"\r\n    const dayNames = [\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n    ];\r\n    const weekLabels = weekDates.map((dateStr, index) => {\r\n      const d = new Date(dateStr);\r\n      const day = d.getDate();\r\n      const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n      const year = d.getFullYear();\r\n      return `${dayNames[index]}(${day}|${month}|${year})`;\r\n    });\r\n\r\n    console.log(\"Week Labels:\", weekLabels);\r\n    console.log(\"Week Data:\", weekData);\r\n\r\n    return { weekLabels, weekData };\r\n  };\r\n\r\n  const { weekLabels, weekData } = getWeekData();\r\n\r\n  const chartData = {\r\n    labels: weekLabels,\r\n    datasets: [\r\n      {\r\n        label: \"Weekly Spending\",\r\n        data: weekData,\r\n        borderColor: \"black\",\r\n        backgroundColor: \"yellow\",\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Daily Expenses for the Current Week\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.line}>\r\n      {error && <p>{error}</p>}\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}