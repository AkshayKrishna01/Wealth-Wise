{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst linearChartData = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n  datasets: [{\n    label: \"Daily Spendind=g\",\n    data: [1000, 2300, 3500, 1200, 4000, 7000, 4000],\n    borderColor: \"rgb(75,192,197)\",\n    tension: 0.4\n  }]\n};\nexport default function Daily() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\n  // Fetching expenses when the component mounts\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Function to fetch expenses from the backend\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`); // Match the backend endpoint\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Function to handle adding an expense\n\n\n  const handleSubmit = async () => {\n    setError(\"\"); // Reset any previous errors\n    // Validate inputs\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Amount should be a positive number\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\n        // Match the backend endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added successfully!\");\n        setSource(\"\"); // Clear the input fields\n\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses(); // Refresh the expense list\n\n        setTimeout(() => setMessage(\"\"), 3000); // Clear the success message after 3 seconds\n      } else {\n        throw new Error(\"Unable to add expense\");\n      }\n    } catch (err) {\n      setError(err.message || \"Unable to add expense\");\n    }\n  }; // Group expenses by date\n\n\n  const dailyExpenses = expenses.reduce((acc, item) => {\n    const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\n\n    acc[day] = (acc[day] || 0) + item.amount;\n    return acc;\n  }, {}); // Chart data to display daily expenses\n\n  const chartData = {\n    labels: Object.keys(dailyExpenses),\n    datasets: [{\n      label: \"Daily Expense\",\n      data: Object.values(dailyExpenses),\n      borderColor: \"red\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.full,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Expense Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        placeholder: \"Expense Source\",\n        value: source,\n        onChange: e => setSource(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"number\",\n        placeholder: \"Amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.btn,\n        onClick: handleSubmit,\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Expense Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.line,\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          data: linearChartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Daily, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","linearChartData","labels","datasets","label","data","borderColor","tension","Daily","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","ok","Error","json","err","handleSubmit","isNaN","method","headers","body","JSON","stringify","Number","setTimeout","dailyExpenses","reduce","acc","item","day","split","chartData","Object","keys","values","fill","full","container","inputfield","e","target","value","btn","line"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport styles from \"./style.module.css\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\nconst linearChartData = {\r\n    labels: [\r\n        \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\r\n    ],\r\n    datasets: [{\r\n        label: \"Daily Spendind=g\",\r\n        data: [1000, 2300, 3500, 1200, 4000, 7000, 4000],\r\n        borderColor: \"rgb(75,192,197)\",\r\n        tension: 0.4\r\n    }]\r\n};\r\nexport default function Daily() {\r\n    const [source, setSource] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\r\n\r\n    // Fetching expenses when the component mounts\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, []);\r\n\r\n    // Function to fetch expenses from the backend\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`); // Match the backend endpoint\r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch expenses\");\r\n            }\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(err.message || \"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    // Function to handle adding an expense\r\n    const handleSubmit = async () => {\r\n        setError(\"\"); // Reset any previous errors\r\n        // Validate inputs\r\n        if (!source || !amount || !date) {\r\n            setError(\"All fields are required\");\r\n            return;\r\n        }\r\n        if (isNaN(amount) || amount <= 0) {\r\n            setError(\"Amount should be a positive number\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`, { // Match the backend endpoint\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ source, amount: Number(amount), date }),\r\n            });\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Expense added successfully!\");\r\n                setSource(\"\"); // Clear the input fields\r\n                setAmount(\"\");\r\n                setDate(\"\");\r\n                fetchExpenses(); // Refresh the expense list\r\n                setTimeout(() => setMessage(\"\"), 3000); // Clear the success message after 3 seconds\r\n            } else {\r\n                throw new Error(\"Unable to add expense\");\r\n            }\r\n        } catch (err) {\r\n            setError(err.message || \"Unable to add expense\");\r\n        }\r\n    };\r\n\r\n    // Group expenses by date\r\n    const dailyExpenses = expenses.reduce((acc, item) => {\r\n        const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\r\n        acc[day] = (acc[day] || 0) + item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    // Chart data to display daily expenses\r\n    const chartData = {\r\n        labels: Object.keys(dailyExpenses),\r\n        datasets: [\r\n            {\r\n                label: \"Daily Expense\",\r\n                data: Object.values(dailyExpenses),\r\n                borderColor: \"red\",\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className={styles.full}> <div className={styles.container}>\r\n            <h3>Daily Expense Tracker</h3>\r\n\r\n            {/* Display success message */}\r\n            {message && <p className=\"text-success\">{message}</p>}\r\n\r\n            {/* Display error message */}\r\n            {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n            {/* Input fields for source, amount, and date */}\r\n            <input\r\n                className={styles.inputfield}\r\n                placeholder=\"Expense Source\"\r\n                value={source}\r\n                onChange={(e) => setSource(e.target.value)}\r\n            />\r\n            <input\r\n                className={styles.inputfield}\r\n                type=\"number\"\r\n                placeholder=\"Amount\"\r\n                value={amount}\r\n                onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n            <input\r\n                className={styles.inputfield}\r\n                type=\"date\"\r\n                value={date}\r\n                onChange={(e) => setDate(e.target.value)}\r\n            />\r\n\r\n            {/* Submit button */}\r\n            <button className={styles.btn} onClick={handleSubmit}>\r\n                Add Expense\r\n            </button>\r\n\r\n            {/* Chart showing daily expenses */}\r\n            <h4>Expense Chart</h4>\r\n            <br />\r\n            <div className={styles.line}>\r\n            <Line data={linearChartData} />;\r\n            \r\n            </div>\r\n            </div></div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}