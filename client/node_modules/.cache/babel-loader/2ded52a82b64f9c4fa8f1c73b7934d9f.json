{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Budgetplan\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./styles.module.css\";\nimport Navigation from \"../NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableNames = [\"transportation\", \"utilities\", \"entertainment\", \"shopping\", \"groceries\", \"other\"];\nconst availableIcons = [\"🚗\", // transportation\n\"💡\", // utilities\n\"🎉\", // entertainment\n\"🛍️\", // shopping\n\"🍎\", // groceries\n\"📦\" // other\n];\n\nconst BudgetPlan = () => {\n  _s();\n\n  const [budgets, setBudgets] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\"); // Form state for creating a new budget plan\n\n  const [name, setName] = useState(availableNames[0]);\n  const [total, setTotal] = useState(\"\");\n  const [icon, setIcon] = useState(availableIcons[0]);\n  const [showIconPicker, setShowIconPicker] = useState(false); // Edit form state\n\n  const [editId, setEditId] = useState(null);\n  const [editName, setEditName] = useState(availableNames[0]);\n  const [editTotal, setEditTotal] = useState(\"\");\n  const [editIcon, setEditIcon] = useState(availableIcons[0]);\n  const [showEditIconPicker, setShowEditIconPicker] = useState(false);\n  const apiUrl = \"http://localhost:8080/api\"; // Helper to get the auth token from localStorage\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    };\n  };\n\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`, {\n        headers: getAuthHeaders()\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch budget plans\");\n      const data = await res.json();\n      setBudgets(data);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!name || !total) {\n      setError(\"Name and Total are required\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`, {\n        method: \"POST\",\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name,\n          total: Number(total),\n          spent: 0,\n          items: 0,\n          icon: icon\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to create budget plan\");\n      setMessage(\"Budget plan created successfully!\"); // Clear form fields (reset to defaults)\n\n      setName(availableNames[0]);\n      setTotal(\"\");\n      setIcon(availableIcons[0]);\n      fetchBudgets();\n      setTimeout(() => setMessage(\"\"), 3000);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleDelete = async id => {\n    if (window.confirm(\"Are you sure you want to delete this budget plan?\")) {\n      try {\n        const res = await fetch(`${apiUrl}/budgetplan/${id}`, {\n          method: \"DELETE\",\n          headers: getAuthHeaders()\n        });\n        if (!res.ok) throw new Error(\"Failed to delete budget plan\");\n        setMessage(\"Budget plan deleted successfully\");\n        fetchBudgets();\n        setTimeout(() => setMessage(\"\"), 3000);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n\n  const handleEdit = plan => {\n    setEditId(plan._id);\n    setEditName(plan.name);\n    setEditTotal(plan.total);\n    setEditIcon(plan.icon);\n  };\n\n  const handleUpdate = async () => {\n    if (!editName || !editTotal) {\n      setError(\"Name and Total are required\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan/${editId}`, {\n        method: \"PUT\",\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name: editName,\n          total: Number(editTotal),\n          spent: 0,\n          items: 0,\n          icon: editIcon\n        })\n      });\n      if (!res.ok) throw new Error(\"Failed to update budget plan\");\n      setMessage(\"Budget plan updated successfully\");\n      fetchBudgets();\n      setTimeout(() => setMessage(\"\"), 3000);\n      setEditId(null);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Budget Plans\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.success_msg,\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 23\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.error_msg,\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: styles.formControl,\n            value: name,\n            onChange: e => setName(e.target.value),\n            children: availableNames.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option.charAt(0).toUpperCase() + option.slice(1)\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: styles.formControl,\n            placeholder: \"Total\",\n            value: total,\n            onChange: e => setTotal(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.iconPickerWrapper,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              readOnly: true,\n              className: styles.formControl,\n              placeholder: \"Select Icon\",\n              value: icon,\n              onClick: () => setShowIconPicker(!showIconPicker)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), showIconPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.iconPicker,\n              children: availableIcons.map(icn => /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: styles.iconButton,\n                onClick: () => {\n                  setIcon(icn);\n                  setShowIconPicker(false);\n                },\n                children: icn\n              }, icn, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonGroup,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.btnSuccess,\n            onClick: handleSubmit,\n            children: \"Create Plan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), budgets.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No budget plans found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.budgetGrid,\n        children: budgets.map(plan => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.budgetCard,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.budgetHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.icon,\n              children: plan.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.budgetTitle,\n              children: plan.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.amount,\n              children: [\"$\", plan.total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.cardButtons,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.btnWarning,\n              onClick: () => handleEdit(plan),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.btnDanger,\n              onClick: () => handleDelete(plan._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)]\n        }, plan._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), editId && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Budget Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: styles.formControl,\n            value: editName,\n            onChange: e => setEditName(e.target.value),\n            children: availableNames.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option.charAt(0).toUpperCase() + option.slice(1)\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: styles.formControl,\n            placeholder: \"Total\",\n            value: editTotal,\n            onChange: e => setEditTotal(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.iconPickerWrapper,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              readOnly: true,\n              className: styles.formControl,\n              placeholder: \"Select Icon\",\n              value: editIcon,\n              onClick: () => setShowEditIconPicker(!showEditIconPicker)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this), showEditIconPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.iconPicker,\n              children: availableIcons.map(icn => /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: styles.iconButton,\n                onClick: () => {\n                  setEditIcon(icn);\n                  setShowEditIconPicker(false);\n                },\n                children: icn\n              }, icn, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.btnSuccess,\n            onClick: handleUpdate,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.btnSecondary,\n            onClick: () => setEditId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BudgetPlan, \"p7Uy1KgcwvO13ruzK1K5Fkjdte8=\");\n\n_c = BudgetPlan;\nexport default BudgetPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetPlan\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Budgetplan/index.jsx"],"names":["React","useState","useEffect","styles","Navigation","availableNames","availableIcons","BudgetPlan","budgets","setBudgets","error","setError","message","setMessage","name","setName","total","setTotal","icon","setIcon","showIconPicker","setShowIconPicker","editId","setEditId","editName","setEditName","editTotal","setEditTotal","editIcon","setEditIcon","showEditIconPicker","setShowEditIconPicker","apiUrl","getAuthHeaders","token","localStorage","getItem","fetchBudgets","res","fetch","headers","ok","Error","data","json","err","handleSubmit","method","body","JSON","stringify","Number","spent","items","setTimeout","handleDelete","id","window","confirm","handleEdit","plan","_id","handleUpdate","container","formContainer","success_msg","error_msg","formGroup","formControl","e","target","value","map","option","charAt","toUpperCase","slice","iconPickerWrapper","iconPicker","icn","iconButton","buttonGroup","btnSuccess","length","budgetGrid","budgetCard","budgetHeader","budgetTitle","amount","cardButtons","btnWarning","btnDanger","btnSecondary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./styles.module.css\";\nimport Navigation from \"../NavBar\";\n\nconst availableNames = [\n  \"transportation\",\n  \"utilities\",\n  \"entertainment\",\n  \"shopping\",\n  \"groceries\",\n  \"other\",\n];\n\nconst availableIcons = [\n  \"🚗\", // transportation\n  \"💡\", // utilities\n  \"🎉\", // entertainment\n  \"🛍️\", // shopping\n  \"🍎\", // groceries\n  \"📦\", // other\n];\n\nconst BudgetPlan = () => {\n  const [budgets, setBudgets] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  // Form state for creating a new budget plan\n  const [name, setName] = useState(availableNames[0]);\n  const [total, setTotal] = useState(\"\");\n  const [icon, setIcon] = useState(availableIcons[0]);\n  const [showIconPicker, setShowIconPicker] = useState(false);\n\n  // Edit form state\n  const [editId, setEditId] = useState(null);\n  const [editName, setEditName] = useState(availableNames[0]);\n  const [editTotal, setEditTotal] = useState(\"\");\n  const [editIcon, setEditIcon] = useState(availableIcons[0]);\n  const [showEditIconPicker, setShowEditIconPicker] = useState(false);\n\n  const apiUrl = \"http://localhost:8080/api\";\n\n  // Helper to get the auth token from localStorage\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    };\n  };\n\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`, {\n        headers: getAuthHeaders(),\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch budget plans\");\n      const data = await res.json();\n      setBudgets(data);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!name || !total) {\n      setError(\"Name and Total are required\");\n      return;\n    }\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`, {\n        method: \"POST\",\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name,\n          total: Number(total),\n          spent: 0,\n          items: 0,\n          icon: icon,\n        }),\n      });\n      if (!res.ok) throw new Error(\"Failed to create budget plan\");\n      setMessage(\"Budget plan created successfully!\");\n      // Clear form fields (reset to defaults)\n      setName(availableNames[0]);\n      setTotal(\"\");\n      setIcon(availableIcons[0]);\n      fetchBudgets();\n      setTimeout(() => setMessage(\"\"), 3000);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    if (window.confirm(\"Are you sure you want to delete this budget plan?\")) {\n      try {\n        const res = await fetch(`${apiUrl}/budgetplan/${id}`, {\n          method: \"DELETE\",\n          headers: getAuthHeaders(),\n        });\n        if (!res.ok) throw new Error(\"Failed to delete budget plan\");\n        setMessage(\"Budget plan deleted successfully\");\n        fetchBudgets();\n        setTimeout(() => setMessage(\"\"), 3000);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n\n  const handleEdit = (plan) => {\n    setEditId(plan._id);\n    setEditName(plan.name);\n    setEditTotal(plan.total);\n    setEditIcon(plan.icon);\n  };\n\n  const handleUpdate = async () => {\n    if (!editName || !editTotal) {\n      setError(\"Name and Total are required\");\n      return;\n    }\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan/${editId}`, {\n        method: \"PUT\",\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name: editName,\n          total: Number(editTotal),\n          spent: 0,\n          items: 0,\n          icon: editIcon,\n        }),\n      });\n      if (!res.ok) throw new Error(\"Failed to update budget plan\");\n      setMessage(\"Budget plan updated successfully\");\n      fetchBudgets();\n      setTimeout(() => setMessage(\"\"), 3000);\n      setEditId(null);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <>\n      <Navigation />\n      <div className={styles.container}>\n        {/* Create Budget Form */}\n        <div className={styles.formContainer}>\n          <h1>Budget Plans</h1>\n          {message && <div className={styles.success_msg}>{message}</div>}\n          {error && <div className={styles.error_msg}>{error}</div>}\n          <div className={styles.formGroup}>\n            {/* Name Dropdown */}\n            <select\n              className={styles.formControl}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            >\n              {availableNames.map((option) => (\n                <option key={option} value={option}>\n                  {option.charAt(0).toUpperCase() + option.slice(1)}\n                </option>\n              ))}\n            </select>\n            {/* Total Input */}\n            <input\n              type=\"number\"\n              className={styles.formControl}\n              placeholder=\"Total\"\n              value={total}\n              onChange={(e) => setTotal(e.target.value)}\n            />\n            {/* Icon Picker */}\n            <div className={styles.iconPickerWrapper}>\n              <input\n                type=\"text\"\n                readOnly\n                className={styles.formControl}\n                placeholder=\"Select Icon\"\n                value={icon}\n                onClick={() => setShowIconPicker(!showIconPicker)}\n              />\n              {showIconPicker && (\n                <div className={styles.iconPicker}>\n                  {availableIcons.map((icn) => (\n                    <button\n                      key={icn}\n                      type=\"button\"\n                      className={styles.iconButton}\n                      onClick={() => {\n                        setIcon(icn);\n                        setShowIconPicker(false);\n                      }}\n                    >\n                      {icn}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className={styles.buttonGroup}>\n            <button\n              type=\"button\"\n              className={styles.btnSuccess}\n              onClick={handleSubmit}\n            >\n              Create Plan\n            </button>\n          </div>\n        </div>\n\n        {/* Display Budget Cards */}\n        {budgets.length === 0 ? (\n          <p>No budget plans found.</p>\n        ) : (\n          <div className={styles.budgetGrid}>\n            {budgets.map((plan) => (\n              <div key={plan._id} className={styles.budgetCard}>\n                <div className={styles.budgetHeader}>\n                  <span className={styles.icon}>{plan.icon}</span>\n                  <span className={styles.budgetTitle}>{plan.name}</span>\n                  <span className={styles.amount}>${plan.total}</span>\n                </div>\n                <div className={styles.cardButtons}>\n                  <button\n                    className={styles.btnWarning}\n                    onClick={() => handleEdit(plan)}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className={styles.btnDanger}\n                    onClick={() => handleDelete(plan._id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Edit Budget Form */}\n        {editId && (\n          <div className={styles.formContainer}>\n            <h2>Edit Budget Plan</h2>\n            <div className={styles.formGroup}>\n              {/* Edit Name Dropdown */}\n              <select\n                className={styles.formControl}\n                value={editName}\n                onChange={(e) => setEditName(e.target.value)}\n              >\n                {availableNames.map((option) => (\n                  <option key={option} value={option}>\n                    {option.charAt(0).toUpperCase() + option.slice(1)}\n                  </option>\n                ))}\n              </select>\n              {/* Edit Total Input */}\n              <input\n                type=\"number\"\n                className={styles.formControl}\n                placeholder=\"Total\"\n                value={editTotal}\n                onChange={(e) => setEditTotal(e.target.value)}\n              />\n              {/* Edit Icon Picker */}\n              <div className={styles.iconPickerWrapper}>\n                <input\n                  type=\"text\"\n                  readOnly\n                  className={styles.formControl}\n                  placeholder=\"Select Icon\"\n                  value={editIcon}\n                  onClick={() =>\n                    setShowEditIconPicker(!showEditIconPicker)\n                  }\n                />\n                {showEditIconPicker && (\n                  <div className={styles.iconPicker}>\n                    {availableIcons.map((icn) => (\n                      <button\n                        key={icn}\n                        type=\"button\"\n                        className={styles.iconButton}\n                        onClick={() => {\n                          setEditIcon(icn);\n                          setShowEditIconPicker(false);\n                        }}\n                      >\n                        {icn}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className={styles.buttonGroup}>\n              <button\n                type=\"button\"\n                className={styles.btnSuccess}\n                onClick={handleUpdate}\n              >\n                Save\n              </button>\n              <button\n                type=\"button\"\n                className={styles.btnSecondary}\n                onClick={() => setEditId(null)}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default BudgetPlan;\n"]},"metadata":{},"sourceType":"module"}