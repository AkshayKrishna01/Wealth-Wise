{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\n  // Fetch expenses when the component mounts\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Function to fetch expenses from the backend\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`);\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Function to handle adding an expense\n\n\n  const handleSubmit = async () => {\n    setError(\"\"); // Reset any previous errors\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Amount should be a positive number\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added successfully!\");\n        setSource(\"\");\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses();\n        setTimeout(() => setMessage(\"\"), 3000);\n      } else {\n        throw new Error(\"Unable to add expense\");\n      }\n    } catch (err) {\n      setError(err.message || \"Unable to add expense\");\n    }\n  }; // Get the current date and find the start of the week (Monday)\n\n\n  const getWeeklyLabels = () => {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - (dayOfWeek + 6) % 7); // Adjust to previous Monday\n\n    const weekLabels = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"].map((day, index) => {\n      const newDate = new Date(monday);\n      newDate.setDate(monday.getDate() + index);\n      return `${day}(${newDate.getDate()}|${String(newDate.getMonth() + 1).padStart(2, \"0\")}|${newDate.getFullYear()})`;\n    });\n    return weekLabels;\n  }; // Group expenses by date\n\n\n  const dailyExpenses = expenses.reduce((acc, item) => {\n    const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\n\n    acc[day] = (acc[day] || 0) + item.amount;\n    return acc;\n  }, {}); // Prepare chart data\n\n  const chartData = {\n    labels: getWeeklyLabels(),\n    datasets: [{\n      label: \"Daily Spending\",\n      data: Object.values(dailyExpenses),\n      borderColor: \"rgb(75,192,197)\",\n      tension: 0.4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.full,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Expense Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        placeholder: \"Expense Source\",\n        value: source,\n        onChange: e => setSource(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"number\",\n        placeholder: \"Amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.btn,\n        onClick: handleSubmit,\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Expense Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.line,\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Daily, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","ok","Error","data","json","err","handleSubmit","isNaN","method","headers","body","JSON","stringify","Number","setTimeout","getWeeklyLabels","today","Date","dayOfWeek","getDay","monday","getDate","weekLabels","map","day","index","newDate","String","getMonth","padStart","getFullYear","dailyExpenses","reduce","acc","item","split","chartData","labels","datasets","label","Object","values","borderColor","tension","full","container","inputfield","e","target","value","btn","line"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport styles from \"./style.module.css\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nexport default function Daily() {\r\n    const [source, setSource] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\r\n\r\n    // Fetch expenses when the component mounts\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, []);\r\n\r\n    // Function to fetch expenses from the backend\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`);\r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch expenses\");\r\n            }\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(err.message || \"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    // Function to handle adding an expense\r\n    const handleSubmit = async () => {\r\n        setError(\"\"); // Reset any previous errors\r\n\r\n        if (!source || !amount || !date) {\r\n            setError(\"All fields are required\");\r\n            return;\r\n        }\r\n        if (isNaN(amount) || amount <= 0) {\r\n            setError(\"Amount should be a positive number\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ source, amount: Number(amount), date }),\r\n            });\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Expense added successfully!\");\r\n                setSource(\"\");\r\n                setAmount(\"\");\r\n                setDate(\"\");\r\n                fetchExpenses();\r\n                setTimeout(() => setMessage(\"\"), 3000);\r\n            } else {\r\n                throw new Error(\"Unable to add expense\");\r\n            }\r\n        } catch (err) {\r\n            setError(err.message || \"Unable to add expense\");\r\n        }\r\n    };\r\n\r\n    // Get the current date and find the start of the week (Monday)\r\n    const getWeeklyLabels = () => {\r\n        const today = new Date();\r\n        const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\r\n        const monday = new Date(today); \r\n        monday.setDate(today.getDate() - ((dayOfWeek + 6) % 7)); // Adjust to previous Monday\r\n\r\n        const weekLabels = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"].map((day, index) => {\r\n            const newDate = new Date(monday);\r\n            newDate.setDate(monday.getDate() + index);\r\n            return `${day}(${newDate.getDate()}|${String(newDate.getMonth() + 1).padStart(2, \"0\")}|${newDate.getFullYear()})`;\r\n        });\r\n\r\n        return weekLabels;\r\n    };\r\n\r\n    // Group expenses by date\r\n    const dailyExpenses = expenses.reduce((acc, item) => {\r\n        const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\r\n        acc[day] = (acc[day] || 0) + item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    // Prepare chart data\r\n    const chartData = {\r\n        labels: getWeeklyLabels(),\r\n        datasets: [{\r\n            label: \"Daily Spending\",\r\n            data: Object.values(dailyExpenses),\r\n            borderColor: \"rgb(75,192,197)\",\r\n            tension: 0.4\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div className={styles.full}>\r\n            <div className={styles.container}>\r\n                <h3>Daily Expense Tracker</h3>\r\n\r\n                {message && <p className=\"text-success\">{message}</p>}\r\n                {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n                <input\r\n                    className={styles.inputfield}\r\n                    placeholder=\"Expense Source\"\r\n                    value={source}\r\n                    onChange={(e) => setSource(e.target.value)}\r\n                />\r\n                <input\r\n                    className={styles.inputfield}\r\n                    type=\"number\"\r\n                    placeholder=\"Amount\"\r\n                    value={amount}\r\n                    onChange={(e) => setAmount(e.target.value)}\r\n                />\r\n                <input\r\n                    className={styles.inputfield}\r\n                    type=\"date\"\r\n                    value={date}\r\n                    onChange={(e) => setDate(e.target.value)}\r\n                />\r\n\r\n                <button className={styles.btn} onClick={handleSubmit}>\r\n                    Add Expense\r\n                </button>\r\n\r\n                <h4>Expense Chart</h4>\r\n                <br />\r\n                <div className={styles.line}>\r\n                    <Line data={chartData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}