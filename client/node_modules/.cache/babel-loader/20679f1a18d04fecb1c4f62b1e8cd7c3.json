{"ast":null,"code":"/*!\n * Chart.js v4.4.7\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      found = true;\n\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  options;\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._each('register', args);\n  }\n\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._each('unregister', args);\n  }\n\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._each('register', args, this.controllers);\n  }\n\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._each('register', args, this.plugins);\n  }\n\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\n    if (axis) {\n      return axis;\n    }\n  }\n\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.4.7\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n\n  return chartArea;\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n\n      this._resize(width, height);\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n\n    ticks.push({\n      value: tickValue\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n\n    if (!item.visible) {\n      continue;\n    }\n\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"sources":["C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\Aishwarya\\Desktop\\PRACTICE\\expo\\client\\node_modules\\chart.js\\src\\index.ts"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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","sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module"}