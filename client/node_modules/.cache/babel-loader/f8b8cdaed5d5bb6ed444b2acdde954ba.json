{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\"); // Update this URL based on your backend configuration\n\n  const apiUrl = \"http://localhost:8080/api\"; // Fetch expenses on mount\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Fetch expenses from backend\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`);\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Handle expense addition\n\n\n  const handleSubmit = async () => {\n    setError(\"\");\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Amount should be a positive number\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added successfully!\");\n        setSource(\"\");\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses();\n        setTimeout(() => setMessage(\"\"), 3000);\n      } else {\n        throw new Error(\"Unable to add expense\");\n      }\n    } catch (err) {\n      setError(err.message || \"Unable to add expense\");\n    }\n  }; // This function computes the current week's Monday and returns an array of 7 ISO date strings (Monday to Sunday)\n\n\n  const getCurrentWeekDates = () => {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\n    // Calculate Monday (if today is Sunday, go back 6 days)\n\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - (dayOfWeek + 6) % 7);\n    const weekDates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(monday);\n      currentDate.setDate(monday.getDate() + i); // Get ISO string in the format yyyy-mm-dd\n\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\n    }\n\n    return weekDates;\n  }; // Generate week labels and data for expenses\n\n\n  const getWeekData = () => {\n    const weekDates = getCurrentWeekDates(); // Sum expenses for each day of the week.\n    // Compare the expense date (assuming it's stored as an ISO string or similar) to the ISO date for each day.\n\n    const weekData = weekDates.map(dateStr => {\n      return expenses.reduce((sum, expense) => {\n        // Extract the date portion from expense.date\n        const expenseDate = expense.date.split(\"T\")[0];\n        return expenseDate === dateStr ? sum + expense.amount : sum;\n      }, 0);\n    }); // Format labels as \"Day(dd|mm|yyyy)\"\n\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const weekLabels = weekDates.map((dateStr, index) => {\n      const d = new Date(dateStr);\n      const day = d.getDate();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const year = d.getFullYear();\n      return `${dayNames[index]}(${day}|${month}|${year})`;\n    });\n    return {\n      weekLabels,\n      weekData\n    };\n  };\n\n  const {\n    weekLabels,\n    weekData\n  } = getWeekData();\n  const chartData = {\n    labels: weekLabels,\n    datasets: [{\n      label: \"Weekly Spending\",\n      data: weekData,\n      borderColor: \"rgb(75,192,197)\",\n      backgroundColor: \"rgba(75,192,197,0.2)\",\n      tension: 0.4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.full,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Expense Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        placeholder: \"Expense Source\",\n        value: source,\n        onChange: e => setSource(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"number\",\n        placeholder: \"Amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.btn,\n        onClick: handleSubmit,\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Expense Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.line,\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Daily, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","ok","Error","data","json","err","handleSubmit","isNaN","method","headers","body","JSON","stringify","Number","setTimeout","getCurrentWeekDates","today","Date","dayOfWeek","getDay","monday","getDate","weekDates","i","currentDate","push","toISOString","split","getWeekData","weekData","map","dateStr","reduce","sum","expense","expenseDate","dayNames","weekLabels","index","d","day","month","String","getMonth","padStart","year","getFullYear","chartData","labels","datasets","label","borderColor","backgroundColor","tension","full","container","inputfield","e","target","value","btn","line"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport styles from \"./style.module.css\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function Daily() {\r\n  const [source, setSource] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Update this URL based on your backend configuration\r\n  const apiUrl = \"http://localhost:8080/api\"; \r\n\r\n  // Fetch expenses on mount\r\n  useEffect(() => {\r\n    fetchExpenses();\r\n  }, []);\r\n\r\n  // Fetch expenses from backend\r\n  const fetchExpenses = async () => {\r\n    try {\r\n      const res = await fetch(`${apiUrl}/dailyexpense`);\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to fetch expenses\");\r\n      }\r\n      const data = await res.json();\r\n      setExpenses(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Failed to fetch expenses\");\r\n    }\r\n  };\r\n\r\n  // Handle expense addition\r\n  const handleSubmit = async () => {\r\n    setError(\"\");\r\n\r\n    if (!source || !amount || !date) {\r\n      setError(\"All fields are required\");\r\n      return;\r\n    }\r\n    if (isNaN(amount) || amount <= 0) {\r\n      setError(\"Amount should be a positive number\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ source, amount: Number(amount), date }),\r\n      });\r\n\r\n      if (res.ok) {\r\n        setMessage(\"Expense added successfully!\");\r\n        setSource(\"\");\r\n        setAmount(\"\");\r\n        setDate(\"\");\r\n        fetchExpenses();\r\n        setTimeout(() => setMessage(\"\"), 3000);\r\n      } else {\r\n        throw new Error(\"Unable to add expense\");\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || \"Unable to add expense\");\r\n    }\r\n  };\r\n\r\n  // This function computes the current week's Monday and returns an array of 7 ISO date strings (Monday to Sunday)\r\n  const getCurrentWeekDates = () => {\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 (Sun) ... 6 (Sat)\r\n    // Calculate Monday (if today is Sunday, go back 6 days)\r\n    const monday = new Date(today);\r\n    monday.setDate(today.getDate() - ((dayOfWeek + 6) % 7));\r\n\r\n    const weekDates = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const currentDate = new Date(monday);\r\n      currentDate.setDate(monday.getDate() + i);\r\n      // Get ISO string in the format yyyy-mm-dd\r\n      weekDates.push(currentDate.toISOString().split(\"T\")[0]);\r\n    }\r\n    return weekDates;\r\n  };\r\n\r\n  // Generate week labels and data for expenses\r\n  const getWeekData = () => {\r\n    const weekDates = getCurrentWeekDates();\r\n\r\n    // Sum expenses for each day of the week.\r\n    // Compare the expense date (assuming it's stored as an ISO string or similar) to the ISO date for each day.\r\n    const weekData = weekDates.map(dateStr => {\r\n      return expenses.reduce((sum, expense) => {\r\n        // Extract the date portion from expense.date\r\n        const expenseDate = expense.date.split(\"T\")[0];\r\n        return expenseDate === dateStr ? sum + expense.amount : sum;\r\n      }, 0);\r\n    });\r\n\r\n    // Format labels as \"Day(dd|mm|yyyy)\"\r\n    const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n    const weekLabels = weekDates.map((dateStr, index) => {\r\n      const d = new Date(dateStr);\r\n      const day = d.getDate();\r\n      const month = String(d.getMonth() + 1).padStart(2, '0');\r\n      const year = d.getFullYear();\r\n      return `${dayNames[index]}(${day}|${month}|${year})`;\r\n    });\r\n\r\n    return { weekLabels, weekData };\r\n  };\r\n\r\n  const { weekLabels, weekData } = getWeekData();\r\n\r\n  const chartData = {\r\n    labels: weekLabels,\r\n    datasets: [{\r\n      label: \"Weekly Spending\",\r\n      data: weekData,\r\n      borderColor: \"rgb(75,192,197)\",\r\n      backgroundColor: \"rgba(75,192,197,0.2)\",\r\n      tension: 0.4,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <div className={styles.full}>\r\n      <div className={styles.container}>\r\n        <h3>Daily Expense Tracker</h3>\r\n\r\n        {/* Success and error messages */}\r\n        {message && <p className=\"text-success\">{message}</p>}\r\n        {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n        {/* Input fields */}\r\n        <input\r\n          className={styles.inputfield}\r\n          placeholder=\"Expense Source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n        />\r\n        <input\r\n          className={styles.inputfield}\r\n          type=\"number\"\r\n          placeholder=\"Amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n        />\r\n        <input\r\n          className={styles.inputfield}\r\n          type=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n        />\r\n\r\n        {/* Submit button */}\r\n        <button className={styles.btn} onClick={handleSubmit}>\r\n          Add Expense\r\n        </button>\r\n\r\n        {/* Expense Chart */}\r\n        <h4>Expense Chart</h4>\r\n        <br />\r\n        <div className={styles.line}>\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}