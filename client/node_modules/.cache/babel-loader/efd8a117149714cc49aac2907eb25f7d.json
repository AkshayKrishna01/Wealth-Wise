{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Linegraph\\\\Line.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [graphData, setGraphData] = useState([]);\n  const [error, setError] = useState(\"\"); // API base URL\n\n  const apiUrl = \"http://localhost:8080/api\"; // Helper: attach auth header (if token is required)\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    };\n  };\n\n  useEffect(() => {\n    fetchGraphData();\n  }, []); // Fetch aggregated daily expense data from the protected endpoint\n\n  const fetchGraphData = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/expense/graph/daily`, {\n        headers: getAuthHeaders()\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch aggregated daily expense data\");\n      }\n\n      const data = await res.json();\n      console.log(\"Aggregated daily data:\", data);\n      setGraphData(data);\n    } catch (err) {\n      console.error(\"Error fetching aggregated daily data:\", err);\n      setError(err.message || \"Failed to fetch aggregated daily expense data\");\n    }\n  }; // Prepare chart labels and dataset from the aggregated data\n  // Expected format: [{ _id: \"YYYY-MM-DD\", totalAmount: Number }, ...]\n\n\n  const labels = graphData.map(item => item._id);\n  const dataSet = graphData.map(item => item.totalAmount);\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: \"Daily Expense\",\n      data: dataSet,\n      borderColor: \"black\",\n      backgroundColor: \"yellow\",\n      tension: 0.1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: \"Daily Expenses for the Current Week\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.line,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Daily, \"ZDmp+wpJch2cv0JAPmOEixyXuOc=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Linegraph/Line.js"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","graphData","setGraphData","error","setError","apiUrl","getAuthHeaders","token","localStorage","getItem","fetchGraphData","res","fetch","headers","ok","Error","data","json","console","log","err","message","labels","map","item","_id","dataSet","totalAmount","chartData","datasets","label","borderColor","backgroundColor","tension","chartOptions","responsive","plugins","legend","position","title","display","text","line"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SACEC,KAAK,IAAIC,OADX,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;;AAWAP,OAAO,CAACQ,QAAR,CACEP,aADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,MAPF;AAUA,eAAe,SAASE,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC,CAF8B,CAI9B;;AACA,QAAMmB,MAAM,GAAG,2BAAf,CAL8B,CAO9B;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,WAAO;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASF,KAAM;AAF5B,KAAP;AAID,GAND;;AAQApB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT,CAhB8B,CAoB9B;;AACA,QAAMA,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEP,MAAO,sBAAX,EAAkC;AACvDQ,QAAAA,OAAO,EAAEP,cAAc;AADgC,OAAlC,CAAvB;;AAGA,UAAI,CAACK,GAAG,CAACG,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,IAAtC;AACAd,MAAAA,YAAY,CAACc,IAAD,CAAZ;AACD,KAVD,CAUE,OAAOI,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACf,KAAR,CAAc,uCAAd,EAAuDiB,GAAvD;AACAhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,+CAAhB,CAAR;AACD;AACF,GAfD,CArB8B,CAsC9B;AACA;;;AACA,QAAMC,MAAM,GAAGrB,SAAS,CAACsB,GAAV,CAAeC,IAAD,IAAUA,IAAI,CAACC,GAA7B,CAAf;AACA,QAAMC,OAAO,GAAGzB,SAAS,CAACsB,GAAV,CAAeC,IAAD,IAAUA,IAAI,CAACG,WAA7B,CAAhB;AAEA,QAAMC,SAAS,GAAG;AAChBN,IAAAA,MAAM,EAAEA,MADQ;AAEhBO,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,eADT;AAEEd,MAAAA,IAAI,EAAEU,OAFR;AAGEK,MAAAA,WAAW,EAAE,OAHf;AAIEC,MAAAA,eAAe,EAAE,QAJnB;AAKEC,MAAAA,OAAO,EAAE;AALX,KADQ;AAFM,GAAlB;AAaA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,UAAU,EAAE,IADO;AAEnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OADD;AAEPC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAFA;AAFU,GAArB;AAQA,sBACE;AAAK,IAAA,SAAS,EAAErD,MAAM,CAACsD,IAAvB;AAAA,eACGvC,KAAK,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YADZ,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEyB,SAAZ;AAAuB,MAAA,OAAO,EAAEM;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAtEuBlC,K;;KAAAA,K","sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport styles from \"./style.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function Daily() {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // API base URL\r\n  const apiUrl = \"http://localhost:8080/api\";\r\n\r\n  // Helper: attach auth header (if token is required)\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${token}`,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchGraphData();\r\n  }, []);\r\n\r\n  // Fetch aggregated daily expense data from the protected endpoint\r\n  const fetchGraphData = async () => {\r\n    try {\r\n      const res = await fetch(`${apiUrl}/expense/graph/daily`, {\r\n        headers: getAuthHeaders(),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to fetch aggregated daily expense data\");\r\n      }\r\n      const data = await res.json();\r\n      console.log(\"Aggregated daily data:\", data);\r\n      setGraphData(data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching aggregated daily data:\", err);\r\n      setError(err.message || \"Failed to fetch aggregated daily expense data\");\r\n    }\r\n  };\r\n\r\n  // Prepare chart labels and dataset from the aggregated data\r\n  // Expected format: [{ _id: \"YYYY-MM-DD\", totalAmount: Number }, ...]\r\n  const labels = graphData.map((item) => item._id);\r\n  const dataSet = graphData.map((item) => item.totalAmount);\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Daily Expense\",\r\n        data: dataSet,\r\n        borderColor: \"black\",\r\n        backgroundColor: \"yellow\",\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: { position: \"top\" },\r\n      title: { display: true, text: \"Daily Expenses for the Current Week\" },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.line}>\r\n      {error && <p>{error}</p>}\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}