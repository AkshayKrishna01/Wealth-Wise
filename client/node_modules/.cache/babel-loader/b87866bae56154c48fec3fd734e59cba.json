{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo\\\\client\\\\src\\\\components\\\\Bargraph\\\\bargraph.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\"; // Register the necessary Chart.js components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nexport default function BudgetChart() {\n  _s();\n\n  const [budgets, setBudgets] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\n\n  useEffect(() => {\n    fetchBudgetAndExpenses();\n  }, []);\n\n  const fetchBudgetAndExpenses = async () => {\n    try {\n      const budgetRes = await fetch(`${apiUrl}/budget`);\n      const expenseRes = await fetch(`${apiUrl}/dailyexpense`);\n\n      if (!budgetRes.ok || !expenseRes.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n\n      const budgetData = await budgetRes.json();\n      const expenseData = await expenseRes.json(); // Check the structure of the data being returned\n\n      console.log(\"Budget Data:\", budgetData);\n      console.log(\"Expense Data:\", expenseData);\n      setBudgets(budgetData);\n      setExpenses(expenseData);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n    }\n  }; // Map budget and expense data\n\n\n  const budgetMap = budgets.reduce((acc, item) => {\n    acc[item.budgetName] = item.amount;\n    return acc;\n  }, {});\n  const expenseMap = expenses.reduce((acc, item) => {\n    acc[item.source] = (acc[item.source] || 0) + item.amount;\n    return acc;\n  }, {}); // Combine both budget and expense labels\n\n  const labels = Array.from(new Set([...Object.keys(budgetMap), ...Object.keys(expenseMap)]));\n  const budgetData = labels.map(label => budgetMap[label] || 0);\n  const expenseData = labels.map(label => expenseMap[label] || 0);\n  const chartData = {\n    labels,\n    datasets: [{\n      label: \"Budget\",\n      data: budgetData,\n      backgroundColor: \"#ffeb99\",\n      // Light yellow color for budget\n      borderColor: \"#ffcc00\",\n      // Dark yellow for border\n      borderWidth: 1\n    }, {\n      label: \"Spending\",\n      data: expenseData,\n      backgroundColor: \"#ffcc00\",\n      // Dark yellow color for spending\n      borderColor: \"#e6a800\",\n      // Even darker yellow for border\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Budget vs Spending\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: \"Budget vs Spending Chart\"\n          },\n          tooltip: {\n            enabled: true\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BudgetChart, \"fYPYRCr0LYa0Ji0O8dbh4qEz10w=\");\n\n_c = BudgetChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetChart\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo/client/src/components/Bargraph/bargraph.js"],"names":["useState","useEffect","Bar","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","register","BudgetChart","budgets","setBudgets","expenses","setExpenses","apiUrl","fetchBudgetAndExpenses","budgetRes","fetch","expenseRes","ok","Error","budgetData","json","expenseData","console","log","err","error","budgetMap","reduce","acc","item","budgetName","amount","expenseMap","source","labels","Array","from","Set","Object","keys","map","label","chartData","datasets","data","backgroundColor","borderColor","borderWidth","responsive","plugins","title","display","text","tooltip","enabled","scales","y","beginAtZero"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,UAAjC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,WAApC,EAAiDC,KAAjD,EAAwDC,OAAxD,EAAiEC,MAAjE,QAA+E,UAA/E,C,CAEA;;;AACAN,OAAO,CAACO,QAAR,CAAiBN,UAAjB,EAA6BC,aAA7B,EAA4CC,WAA5C,EAAyDC,KAAzD,EAAgEC,OAAhE,EAAyEC,MAAzE;AAEA,eAAe,SAASE,WAAT,GAAuB;AAAA;;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMiB,MAAM,GAAG,2BAAf,CAHkC,CAGU;;AAE5ChB,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,sBAAsB;AACzB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,sBAAsB,GAAG,YAAY;AACvC,QAAI;AACA,YAAMC,SAAS,GAAG,MAAMC,KAAK,CAAE,GAAEH,MAAO,SAAX,CAA7B;AACA,YAAMI,UAAU,GAAG,MAAMD,KAAK,CAAE,GAAEH,MAAO,eAAX,CAA9B;;AAEA,UAAI,CAACE,SAAS,CAACG,EAAX,IAAiB,CAACD,UAAU,CAACC,EAAjC,EAAqC;AACjC,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AAED,YAAMC,UAAU,GAAG,MAAML,SAAS,CAACM,IAAV,EAAzB;AACA,YAAMC,WAAW,GAAG,MAAML,UAAU,CAACI,IAAX,EAA1B,CATA,CAWA;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,UAA5B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,WAA7B;AAEAZ,MAAAA,UAAU,CAACU,UAAD,CAAV;AACAR,MAAAA,WAAW,CAACU,WAAD,CAAX;AACH,KAjBD,CAiBE,OAAOG,GAAP,EAAY;AACVF,MAAAA,OAAO,CAACG,KAAR,CAAc,sBAAd,EAAsCD,GAAtC;AACH;AACJ,GArBD,CATkC,CAgClC;;;AACA,QAAME,SAAS,GAAGlB,OAAO,CAACmB,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC5CD,IAAAA,GAAG,CAACC,IAAI,CAACC,UAAN,CAAH,GAAuBD,IAAI,CAACE,MAA5B;AACA,WAAOH,GAAP;AACH,GAHiB,EAGf,EAHe,CAAlB;AAKA,QAAMI,UAAU,GAAGtB,QAAQ,CAACiB,MAAT,CAAgB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC9CD,IAAAA,GAAG,CAACC,IAAI,CAACI,MAAN,CAAH,GAAmB,CAACL,GAAG,CAACC,IAAI,CAACI,MAAN,CAAH,IAAoB,CAArB,IAA0BJ,IAAI,CAACE,MAAlD;AACA,WAAOH,GAAP;AACH,GAHkB,EAGhB,EAHgB,CAAnB,CAtCkC,CA2ClC;;AACA,QAAMM,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYb,SAAZ,CAAJ,EAA4B,GAAGY,MAAM,CAACC,IAAP,CAAYP,UAAZ,CAA/B,CAAR,CAAX,CAAf;AACA,QAAMb,UAAU,GAAGe,MAAM,CAACM,GAAP,CAAWC,KAAK,IAAIf,SAAS,CAACe,KAAD,CAAT,IAAoB,CAAxC,CAAnB;AACA,QAAMpB,WAAW,GAAGa,MAAM,CAACM,GAAP,CAAWC,KAAK,IAAIT,UAAU,CAACS,KAAD,CAAV,IAAqB,CAAzC,CAApB;AAEA,QAAMC,SAAS,GAAG;AACdR,IAAAA,MADc;AAEdS,IAAAA,QAAQ,EAAE,CACN;AACIF,MAAAA,KAAK,EAAE,QADX;AAEIG,MAAAA,IAAI,EAAEzB,UAFV;AAGI0B,MAAAA,eAAe,EAAE,SAHrB;AAGgC;AAC5BC,MAAAA,WAAW,EAAE,SAJjB;AAIgC;AAC5BC,MAAAA,WAAW,EAAE;AALjB,KADM,EAQN;AACIN,MAAAA,KAAK,EAAE,UADX;AAEIG,MAAAA,IAAI,EAAEvB,WAFV;AAGIwB,MAAAA,eAAe,EAAE,SAHrB;AAGgC;AAC5BC,MAAAA,WAAW,EAAE,SAJjB;AAIgC;AAC5BC,MAAAA,WAAW,EAAE;AALjB,KARM;AAFI,GAAlB;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEL,SAAX;AAAsB,MAAA,OAAO,EAAE;AAC3BM,QAAAA,UAAU,EAAE,IADe;AAE3BC,QAAAA,OAAO,EAAE;AACLC,UAAAA,KAAK,EAAE;AACHC,YAAAA,OAAO,EAAE,IADN;AAEHC,YAAAA,IAAI,EAAE;AAFH,WADF;AAKLC,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AALJ,SAFkB;AAW3BC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAE;AACCC,YAAAA,WAAW,EAAE;AADd;AADC;AAXmB;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GA1FuBlD,W;;KAAAA,W","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS } from \"chart.js\";\r\nimport { BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n\r\n// Register the necessary Chart.js components\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nexport default function BudgetChart() {\r\n    const [budgets, setBudgets] = useState([]);\r\n    const [expenses, setExpenses] = useState([]);\r\n    const apiUrl = \"http://localhost:8080/api\"; // Update with your backend URL\r\n\r\n    useEffect(() => {\r\n        fetchBudgetAndExpenses();\r\n    }, []);\r\n\r\n    const fetchBudgetAndExpenses = async () => {\r\n        try {\r\n            const budgetRes = await fetch(`${apiUrl}/budget`);\r\n            const expenseRes = await fetch(`${apiUrl}/dailyexpense`);\r\n\r\n            if (!budgetRes.ok || !expenseRes.ok) {\r\n                throw new Error(\"Failed to fetch data\");\r\n            }\r\n\r\n            const budgetData = await budgetRes.json();\r\n            const expenseData = await expenseRes.json();\r\n\r\n            // Check the structure of the data being returned\r\n            console.log(\"Budget Data:\", budgetData);\r\n            console.log(\"Expense Data:\", expenseData);\r\n\r\n            setBudgets(budgetData);\r\n            setExpenses(expenseData);\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err);\r\n        }\r\n    };\r\n\r\n    // Map budget and expense data\r\n    const budgetMap = budgets.reduce((acc, item) => {\r\n        acc[item.budgetName] = item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    const expenseMap = expenses.reduce((acc, item) => {\r\n        acc[item.source] = (acc[item.source] || 0) + item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    // Combine both budget and expense labels\r\n    const labels = Array.from(new Set([...Object.keys(budgetMap), ...Object.keys(expenseMap)]));\r\n    const budgetData = labels.map(label => budgetMap[label] || 0);\r\n    const expenseData = labels.map(label => expenseMap[label] || 0);\r\n\r\n    const chartData = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: \"Budget\",\r\n                data: budgetData,\r\n                backgroundColor: \"#ffeb99\", // Light yellow color for budget\r\n                borderColor: \"#ffcc00\",     // Dark yellow for border\r\n                borderWidth: 1,\r\n            },\r\n            {\r\n                label: \"Spending\",\r\n                data: expenseData,\r\n                backgroundColor: \"#ffcc00\", // Dark yellow color for spending\r\n                borderColor: \"#e6a800\",     // Even darker yellow for border\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Budget vs Spending</h3>\r\n            <Bar data={chartData} options={{\r\n                responsive: true,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: \"Budget vs Spending Chart\",\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                    }\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true,\r\n                    }\r\n                }\r\n            }} />\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}