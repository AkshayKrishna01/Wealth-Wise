{"ast":null,"code":"// expense.js (Backend)\nconst express = require(\"express\");\n\nconst mongoose = require(\"mongoose\");\n\nconst authenticateUser = require(\"./middleware/authMiddleware\"); // Your auth middleware\n\n\nconst router = express.Router(); // Expense Schema with updated enums and user association\n\nconst ExpenseSchema = new mongoose.Schema({\n  expenseType: {\n    type: String,\n    enum: [\"Monthly\", \"Daily\"],\n    required: true\n  },\n  expense: {\n    type: String,\n    enum: [\"transportation\", \"entertainment\", \"utilities\", \"shopping\", \"groceries\", \"other\"],\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  reference: {\n    type: String\n  },\n  date: {\n    type: Date,\n    required: true\n  },\n  user_id: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  }\n});\nconst ExpenseModel = mongoose.model(\"Expense\", ExpenseSchema); // Add Expense Entry (only for the authenticated user)\n\nrouter.post(\"/expense\", authenticateUser, async (req, res) => {\n  const {\n    expenseType,\n    expense,\n    amount,\n    reference,\n    date\n  } = req.body;\n  const userId = req.user._id; // Retrieved from auth middleware\n\n  try {\n    const newExpense = new ExpenseModel({\n      expenseType,\n      expense,\n      amount,\n      reference,\n      date,\n      user_id: userId\n    });\n    await newExpense.save();\n    res.status(201).json(newExpense);\n  } catch (error) {\n    console.error(\"Error adding expense:\", error);\n    res.status(500).json({\n      message: \"Failed to add expense\",\n      error: error.message\n    });\n  }\n}); // Get All Expense Entries for the authenticated user\n\nrouter.get(\"/expense\", authenticateUser, async (req, res) => {\n  const userId = req.user._id;\n\n  try {\n    const expenses = await ExpenseModel.find({\n      user_id: userId\n    }).sort({\n      date: 1\n    });\n    res.json(expenses);\n  } catch (error) {\n    console.error(\"Error fetching expenses:\", error);\n    res.status(500).json({\n      message: \"Failed to retrieve expenses\",\n      error: error.message\n    });\n  }\n}); // Update an Expense Entry (only if it belongs to the authenticated user)\n\nrouter.put(\"/expense/:id\", authenticateUser, async (req, res) => {\n  const {\n    expenseType,\n    expense,\n    amount,\n    reference,\n    date\n  } = req.body;\n  const {\n    id\n  } = req.params;\n  const userId = req.user._id;\n\n  try {\n    const updatedExpense = await ExpenseModel.findOneAndUpdate({\n      _id: id,\n      user_id: userId\n    }, {\n      expenseType,\n      expense,\n      amount,\n      reference,\n      date\n    }, {\n      new: true\n    });\n\n    if (!updatedExpense) {\n      return res.status(404).json({\n        message: \"Expense not found or not authorized\"\n      });\n    }\n\n    res.json(updatedExpense);\n  } catch (error) {\n    console.error(\"Error updating expense:\", error);\n    res.status(500).json({\n      message: \"Failed to update expense\",\n      error: error.message\n    });\n  }\n}); // Delete an Expense Entry (only if it belongs to the authenticated user)\n\nrouter.delete(\"/expense/:id\", authenticateUser, async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const userId = req.user._id;\n\n  try {\n    const deletedExpense = await ExpenseModel.findOneAndDelete({\n      _id: id,\n      user_id: userId\n    });\n\n    if (!deletedExpense) {\n      return res.status(404).json({\n        message: \"Expense not found or not authorized\"\n      });\n    }\n\n    res.json({\n      message: \"Expense deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting expense:\", error);\n    res.status(500).json({\n      message: \"Failed to delete expense\",\n      error: error.message\n    });\n  }\n}); // Get Aggregated Daily Expense Data for Graphing (only for the authenticated user)\n\nrouter.get(\"/expense/graph/daily\", authenticateUser, async (req, res) => {\n  const userId = req.user._id;\n\n  try {\n    const dailyData = await ExpenseModel.aggregate([{\n      $match: {\n        expenseType: \"Daily\",\n        user_id: new mongoose.Types.ObjectId(userId)\n      }\n    }, {\n      $group: {\n        _id: {\n          $dateToString: {\n            format: \"%Y-%m-%d\",\n            date: \"$date\"\n          }\n        },\n        totalAmount: {\n          $sum: \"$amount\"\n        }\n      }\n    }, {\n      $sort: {\n        _id: 1\n      }\n    }]);\n    res.json(dailyData);\n  } catch (error) {\n    console.error(\"Error aggregating daily expense data:\", error);\n    res.status(500).json({\n      message: \"Failed to fetch daily expense data\",\n      error: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Expense/index.jsx"],"names":["express","require","mongoose","authenticateUser","router","Router","ExpenseSchema","Schema","expenseType","type","String","enum","required","expense","amount","Number","reference","date","Date","user_id","Types","ObjectId","ref","ExpenseModel","model","post","req","res","body","userId","user","_id","newExpense","save","status","json","error","console","message","get","expenses","find","sort","put","id","params","updatedExpense","findOneAndUpdate","new","delete","deletedExpense","findOneAndDelete","dailyData","aggregate","$match","$group","$dateToString","format","totalAmount","$sum","$sort","module","exports"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,6BAAD,CAAhC,C,CAAiE;;;AAEjE,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAf,C,CAEA;;AACA,MAAMC,aAAa,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACxCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAEC,MADK;AAEXC,IAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,OAAZ,CAFK;AAGXC,IAAAA,QAAQ,EAAE;AAHC,GAD2B;AAMxCC,EAAAA,OAAO,EAAE;AACPJ,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,IAAI,EAAE,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,WAApC,EAAiD,UAAjD,EAA6D,WAA7D,EAA0E,OAA1E,CAFC;AAGPC,IAAAA,QAAQ,EAAE;AAHH,GAN+B;AAWxCE,EAAAA,MAAM,EAAE;AAAEL,IAAAA,IAAI,EAAEM,MAAR;AAAgBH,IAAAA,QAAQ,EAAE;AAA1B,GAXgC;AAYxCI,EAAAA,SAAS,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GAZ6B;AAaxCO,EAAAA,IAAI,EAAE;AAAER,IAAAA,IAAI,EAAES,IAAR;AAAcN,IAAAA,QAAQ,EAAE;AAAxB,GAbkC;AAcxCO,EAAAA,OAAO,EAAE;AAAEV,IAAAA,IAAI,EAAEP,QAAQ,CAACK,MAAT,CAAgBa,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE,MAA7C;AAAqDV,IAAAA,QAAQ,EAAE;AAA/D;AAd+B,CAApB,CAAtB;AAiBA,MAAMW,YAAY,GAAGrB,QAAQ,CAACsB,KAAT,CAAe,SAAf,EAA0BlB,aAA1B,CAArB,C,CAEA;;AACAF,MAAM,CAACqB,IAAP,CAAY,UAAZ,EAAwBtB,gBAAxB,EAA0C,OAAOuB,GAAP,EAAYC,GAAZ,KAAoB;AAC5D,QAAM;AAAEnB,IAAAA,WAAF;AAAeK,IAAAA,OAAf;AAAwBC,IAAAA,MAAxB;AAAgCE,IAAAA,SAAhC;AAA2CC,IAAAA;AAA3C,MAAoDS,GAAG,CAACE,IAA9D;AACA,QAAMC,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,GAAxB,CAF4D,CAE/B;;AAE7B,MAAI;AACF,UAAMC,UAAU,GAAG,IAAIT,YAAJ,CAAiB;AAAEf,MAAAA,WAAF;AAAeK,MAAAA,OAAf;AAAwBC,MAAAA,MAAxB;AAAgCE,MAAAA,SAAhC;AAA2CC,MAAAA,IAA3C;AAAiDE,MAAAA,OAAO,EAAEU;AAA1D,KAAjB,CAAnB;AACA,UAAMG,UAAU,CAACC,IAAX,EAAN;AACAN,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,UAArB;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACAT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAE,uBAAX;AAAoCF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAjD,KAArB;AACD;AACF,CAZD,E,CAcA;;AACAlC,MAAM,CAACmC,GAAP,CAAW,UAAX,EAAuBpC,gBAAvB,EAAyC,OAAOuB,GAAP,EAAYC,GAAZ,KAAoB;AAC3D,QAAME,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,GAAxB;;AACA,MAAI;AACF,UAAMS,QAAQ,GAAG,MAAMjB,YAAY,CAACkB,IAAb,CAAkB;AAAEtB,MAAAA,OAAO,EAAEU;AAAX,KAAlB,EAAuCa,IAAvC,CAA4C;AAAEzB,MAAAA,IAAI,EAAE;AAAR,KAA5C,CAAvB;AACAU,IAAAA,GAAG,CAACQ,IAAJ,CAASK,QAAT;AACD,GAHD,CAGE,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACAT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAE,6BAAX;AAA0CF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAvD,KAArB;AACD;AACF,CATD,E,CAWA;;AACAlC,MAAM,CAACuC,GAAP,CAAW,cAAX,EAA2BxC,gBAA3B,EAA6C,OAAOuB,GAAP,EAAYC,GAAZ,KAAoB;AAC/D,QAAM;AAAEnB,IAAAA,WAAF;AAAeK,IAAAA,OAAf;AAAwBC,IAAAA,MAAxB;AAAgCE,IAAAA,SAAhC;AAA2CC,IAAAA;AAA3C,MAAoDS,GAAG,CAACE,IAA9D;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAASlB,GAAG,CAACmB,MAAnB;AACA,QAAMhB,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,GAAxB;;AAEA,MAAI;AACF,UAAMe,cAAc,GAAG,MAAMvB,YAAY,CAACwB,gBAAb,CAC3B;AAAEhB,MAAAA,GAAG,EAAEa,EAAP;AAAWzB,MAAAA,OAAO,EAAEU;AAApB,KAD2B,EAE3B;AAAErB,MAAAA,WAAF;AAAeK,MAAAA,OAAf;AAAwBC,MAAAA,MAAxB;AAAgCE,MAAAA,SAAhC;AAA2CC,MAAAA;AAA3C,KAF2B,EAG3B;AAAE+B,MAAAA,GAAG,EAAE;AAAP,KAH2B,CAA7B;;AAKA,QAAI,CAACF,cAAL,EAAqB;AACnB,aAAOnB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AACDX,IAAAA,GAAG,CAACQ,IAAJ,CAASW,cAAT;AACD,GAVD,CAUE,OAAOV,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAE,0BAAX;AAAuCF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAApD,KAArB;AACD;AACF,CAnBD,E,CAqBA;;AACAlC,MAAM,CAAC6C,MAAP,CAAc,cAAd,EAA8B9C,gBAA9B,EAAgD,OAAOuB,GAAP,EAAYC,GAAZ,KAAoB;AAClE,QAAM;AAAEiB,IAAAA;AAAF,MAASlB,GAAG,CAACmB,MAAnB;AACA,QAAMhB,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,GAAxB;;AACA,MAAI;AACF,UAAMmB,cAAc,GAAG,MAAM3B,YAAY,CAAC4B,gBAAb,CAA8B;AAAEpB,MAAAA,GAAG,EAAEa,EAAP;AAAWzB,MAAAA,OAAO,EAAEU;AAApB,KAA9B,CAA7B;;AACA,QAAI,CAACqB,cAAL,EAAqB;AACnB,aAAOvB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AACDX,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAT;AACD,GAND,CAME,OAAOF,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAE,0BAAX;AAAuCF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAApD,KAArB;AACD;AACF,CAbD,E,CAeA;;AACAlC,MAAM,CAACmC,GAAP,CAAW,sBAAX,EAAmCpC,gBAAnC,EAAqD,OAAOuB,GAAP,EAAYC,GAAZ,KAAoB;AACvE,QAAME,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,GAAxB;;AACA,MAAI;AACF,UAAMqB,SAAS,GAAG,MAAM7B,YAAY,CAAC8B,SAAb,CAAuB,CAC7C;AACEC,MAAAA,MAAM,EAAE;AACN9C,QAAAA,WAAW,EAAE,OADP;AAENW,QAAAA,OAAO,EAAE,IAAIjB,QAAQ,CAACkB,KAAT,CAAeC,QAAnB,CAA4BQ,MAA5B;AAFH;AADV,KAD6C,EAO7C;AACE0B,MAAAA,MAAM,EAAE;AACNxB,QAAAA,GAAG,EAAE;AAAEyB,UAAAA,aAAa,EAAE;AAAEC,YAAAA,MAAM,EAAE,UAAV;AAAsBxC,YAAAA,IAAI,EAAE;AAA5B;AAAjB,SADC;AAENyC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAFP;AADV,KAP6C,EAa7C;AAAEC,MAAAA,KAAK,EAAE;AAAE7B,QAAAA,GAAG,EAAE;AAAP;AAAT,KAb6C,CAAvB,CAAxB;AAeAJ,IAAAA,GAAG,CAACQ,IAAJ,CAASiB,SAAT;AACD,GAjBD,CAiBE,OAAOhB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACAT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAE,oCAAX;AAAiDF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAA9D,KAArB;AACD;AACF,CAvBD;AAyBAuB,MAAM,CAACC,OAAP,GAAiB1D,MAAjB","sourcesContent":["// expense.js (Backend)\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst authenticateUser = require(\"./middleware/authMiddleware\"); // Your auth middleware\n\nconst router = express.Router();\n\n// Expense Schema with updated enums and user association\nconst ExpenseSchema = new mongoose.Schema({\n  expenseType: { \n    type: String, \n    enum: [\"Monthly\", \"Daily\"], \n    required: true \n  },\n  expense: { \n    type: String, \n    enum: [\"transportation\", \"entertainment\", \"utilities\", \"shopping\", \"groceries\", \"other\"],\n    required: true \n  },\n  amount: { type: Number, required: true },\n  reference: { type: String },\n  date: { type: Date, required: true },\n  user_id: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n});\n\nconst ExpenseModel = mongoose.model(\"Expense\", ExpenseSchema);\n\n// Add Expense Entry (only for the authenticated user)\nrouter.post(\"/expense\", authenticateUser, async (req, res) => {\n  const { expenseType, expense, amount, reference, date } = req.body;\n  const userId = req.user._id; // Retrieved from auth middleware\n\n  try {\n    const newExpense = new ExpenseModel({ expenseType, expense, amount, reference, date, user_id: userId });\n    await newExpense.save();\n    res.status(201).json(newExpense);\n  } catch (error) {\n    console.error(\"Error adding expense:\", error);\n    res.status(500).json({ message: \"Failed to add expense\", error: error.message });\n  }\n});\n\n// Get All Expense Entries for the authenticated user\nrouter.get(\"/expense\", authenticateUser, async (req, res) => {\n  const userId = req.user._id;\n  try {\n    const expenses = await ExpenseModel.find({ user_id: userId }).sort({ date: 1 });\n    res.json(expenses);\n  } catch (error) {\n    console.error(\"Error fetching expenses:\", error);\n    res.status(500).json({ message: \"Failed to retrieve expenses\", error: error.message });\n  }\n});\n\n// Update an Expense Entry (only if it belongs to the authenticated user)\nrouter.put(\"/expense/:id\", authenticateUser, async (req, res) => {\n  const { expenseType, expense, amount, reference, date } = req.body;\n  const { id } = req.params;\n  const userId = req.user._id;\n\n  try {\n    const updatedExpense = await ExpenseModel.findOneAndUpdate(\n      { _id: id, user_id: userId },\n      { expenseType, expense, amount, reference, date },\n      { new: true }\n    );\n    if (!updatedExpense) {\n      return res.status(404).json({ message: \"Expense not found or not authorized\" });\n    }\n    res.json(updatedExpense);\n  } catch (error) {\n    console.error(\"Error updating expense:\", error);\n    res.status(500).json({ message: \"Failed to update expense\", error: error.message });\n  }\n});\n\n// Delete an Expense Entry (only if it belongs to the authenticated user)\nrouter.delete(\"/expense/:id\", authenticateUser, async (req, res) => {\n  const { id } = req.params;\n  const userId = req.user._id;\n  try {\n    const deletedExpense = await ExpenseModel.findOneAndDelete({ _id: id, user_id: userId });\n    if (!deletedExpense) {\n      return res.status(404).json({ message: \"Expense not found or not authorized\" });\n    }\n    res.json({ message: \"Expense deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting expense:\", error);\n    res.status(500).json({ message: \"Failed to delete expense\", error: error.message });\n  }\n});\n\n// Get Aggregated Daily Expense Data for Graphing (only for the authenticated user)\nrouter.get(\"/expense/graph/daily\", authenticateUser, async (req, res) => { \n  const userId = req.user._id;\n  try {\n    const dailyData = await ExpenseModel.aggregate([\n      { \n        $match: { \n          expenseType: \"Daily\", \n          user_id: new mongoose.Types.ObjectId(userId)\n        } \n      },\n      {\n        $group: {\n          _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$date\" } },\n          totalAmount: { $sum: \"$amount\" }\n        }\n      },\n      { $sort: { _id: 1 } }\n    ]);\n    res.json(dailyData);\n  } catch (error) {\n    console.error(\"Error aggregating daily expense data:\", error);\n    res.status(500).json({ message: \"Failed to fetch daily expense data\", error: error.message });\n  }\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"module"}