{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Linegraph\\\\Line.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Navigation from \"../NavBar\";\nimport styles from \"./style.module.css\";\nimport Line from \"../Linegraph/Line\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CombinedExpense() {\n  _s();\n\n  const [expenseType, setExpenseType] = useState(\"Monthly\");\n  const [expense, setExpense] = useState(\"transportation\");\n  const [amount, setAmount] = useState(\"\");\n  const [reference, setReference] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [graphData, setGraphData] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [editId, setEditId] = useState(null);\n  const [editExpenseType, setEditExpenseType] = useState(\"Monthly\");\n  const [editExpense, setEditExpense] = useState(\"transportation\");\n  const [editAmount, setEditAmount] = useState(\"\");\n  const [editReference, setEditReference] = useState(\"\");\n  const [editDate, setEditDate] = useState(\"\");\n  const apiUrl = \"http://localhost:8080/api/expense\";\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    };\n  };\n\n  useEffect(() => {\n    getItems();\n    fetchGraphData();\n  }, []);\n\n  const getItems = () => {\n    fetch(apiUrl, {\n      method: \"GET\",\n      headers: getAuthHeaders()\n    }).then(res => res.json()).then(data => setExpenses(data)).catch(() => setError(\"Failed to fetch expenses\"));\n  };\n\n  const fetchGraphData = () => {\n    fetch(`${apiUrl}/graph/daily`, {\n      method: \"GET\",\n      headers: getAuthHeaders()\n    }).then(res => res.json()).then(data => {\n      console.log(\"Fetched Graph Data:\", data); // Debugging\n\n      setGraphData(data);\n    }).catch(err => console.error(\"Error fetching graph data\", err));\n  };\n\n  const chartData = {\n    labels: graphData.map(d => d._id),\n    datasets: [{\n      label: \"Daily Expense\",\n      data: graphData.map(d => d.totalAmount),\n      fill: false,\n      borderColor: \"#ff6384\",\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.graphContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Daily Expense Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), graphData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available for the graph.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CombinedExpense, \"FGRXQIcMeCFrDpwo1FOS4qtY5/I=\");\n\n_c = CombinedExpense;\n\nvar _c;\n\n$RefreshReg$(_c, \"CombinedExpense\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Linegraph/Line.js"],"names":["useEffect","useState","Navigation","styles","Line","CombinedExpense","expenseType","setExpenseType","expense","setExpense","amount","setAmount","reference","setReference","date","setDate","expenses","setExpenses","graphData","setGraphData","error","setError","message","setMessage","editId","setEditId","editExpenseType","setEditExpenseType","editExpense","setEditExpense","editAmount","setEditAmount","editReference","setEditReference","editDate","setEditDate","apiUrl","getAuthHeaders","token","localStorage","getItem","getItems","fetchGraphData","fetch","method","headers","then","res","json","data","catch","console","log","err","chartData","labels","map","d","_id","datasets","label","totalAmount","fill","borderColor","tension","container","graphContainer","length"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Navigation from \"../NavBar\";\r\nimport styles from \"./style.module.css\";\r\nimport Line from \"../Linegraph/Line\";\r\n\r\nexport default function CombinedExpense() {\r\n  const [expenseType, setExpenseType] = useState(\"Monthly\");\r\n  const [expense, setExpense] = useState(\"transportation\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [reference, setReference] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [editId, setEditId] = useState(null);\r\n  const [editExpenseType, setEditExpenseType] = useState(\"Monthly\");\r\n  const [editExpense, setEditExpense] = useState(\"transportation\");\r\n  const [editAmount, setEditAmount] = useState(\"\");\r\n  const [editReference, setEditReference] = useState(\"\");\r\n  const [editDate, setEditDate] = useState(\"\");\r\n\r\n  const apiUrl = \"http://localhost:8080/api/expense\";\r\n\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${token}`,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    getItems();\r\n    fetchGraphData();\r\n  }, []);\r\n\r\n  const getItems = () => {\r\n    fetch(apiUrl, { method: \"GET\", headers: getAuthHeaders() })\r\n      .then((res) => res.json())\r\n      .then((data) => setExpenses(data))\r\n      .catch(() => setError(\"Failed to fetch expenses\"));\r\n  };\r\n\r\n  const fetchGraphData = () => {\r\n    fetch(`${apiUrl}/graph/daily`, { method: \"GET\", headers: getAuthHeaders() })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"Fetched Graph Data:\", data); // Debugging\r\n        setGraphData(data);\r\n      })\r\n      .catch((err) => console.error(\"Error fetching graph data\", err));\r\n  };\r\n\r\n  const chartData = {\r\n    labels: graphData.map((d) => d._id),\r\n    datasets: [\r\n      {\r\n        label: \"Daily Expense\",\r\n        data: graphData.map((d) => d.totalAmount),\r\n        fill: false,\r\n        borderColor: \"#ff6384\",\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.container}>\r\n        {/* Form and Table Code Here */}\r\n\r\n        {/* Daily Expense Graph */}\r\n        <div className={styles.graphContainer}>\r\n          <h3>Daily Expense Graph</h3>\r\n          {graphData.length > 0 ? (\r\n            <Line data={chartData} />\r\n          ) : (\r\n            <p>No data available for the graph.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}