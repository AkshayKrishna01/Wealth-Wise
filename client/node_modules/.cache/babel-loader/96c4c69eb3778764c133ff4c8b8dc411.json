{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Daily() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const apiUrl = \"http://localhost:8080/api\"; // Adjust based on your backend\n  // Fetch expenses on component mount\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Function to fetch expenses from backend\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`);\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Function to handle adding an expense\n\n\n  const handleSubmit = async () => {\n    setError(\"\");\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Amount should be a positive number\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added successfully!\");\n        setSource(\"\");\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses(); // Refresh data\n\n        setTimeout(() => setMessage(\"\"), 3000);\n      } else {\n        throw new Error(\"Unable to add expense\");\n      }\n    } catch (err) {\n      setError(err.message || \"Unable to add expense\");\n    }\n  }; // Group expenses by day of the week (Monday-Sunday)\n\n\n  const weeklyExpenses = {\n    Monday: 0,\n    Tuesday: 0,\n    Wednesday: 0,\n    Thursday: 0,\n    Friday: 0,\n    Saturday: 0,\n    Sunday: 0\n  };\n  expenses.forEach(expense => {\n    const dayOfWeek = new Date(expense.date).toLocaleDateString(\"en-US\", {\n      weekday: \"long\"\n    });\n\n    if (weeklyExpenses[dayOfWeek] !== undefined) {\n      weeklyExpenses[dayOfWeek] += expense.amount;\n    }\n  }); // Chart data dynamically updated\n\n  const chartData = {\n    labels: Object.keys(weeklyExpenses),\n    datasets: [{\n      label: \"Weekly Spending\",\n      data: Object.values(weeklyExpenses),\n      borderColor: \"rgb(75,192,197)\",\n      backgroundColor: \"rgba(75,192,197,0.2)\",\n      tension: 0.4\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.full,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Expense Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        placeholder: \"Expense Source\",\n        value: source,\n        onChange: e => setSource(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"number\",\n        placeholder: \"Amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.inputfield,\n        type: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.btn,\n        onClick: handleSubmit,\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Expense Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.line,\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Daily, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["useState","useEffect","styles","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","Daily","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","ok","Error","data","json","err","handleSubmit","isNaN","method","headers","body","JSON","stringify","Number","setTimeout","weeklyExpenses","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","forEach","expense","dayOfWeek","Date","toLocaleDateString","weekday","undefined","chartData","labels","Object","keys","datasets","label","values","borderColor","backgroundColor","tension","full","container","inputfield","e","target","value","btn","line"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SACIC,KAAK,IAAIC,OADb,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,YAJJ,EAKIC,WALJ,EAMIC,KANJ,EAOIC,OAPJ,EAQIC,MARJ,QASO,UATP;;AAWAP,OAAO,CAACQ,QAAR,CAAiBP,aAAjB,EAAgCC,WAAhC,EAA6CC,YAA7C,EAA2DC,WAA3D,EAAwEC,KAAxE,EAA+EC,OAA/E,EAAwFC,MAAxF;AAEA,eAAe,SAASE,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM2B,MAAM,GAAG,2BAAf,CAR4B,CAQgB;AAE5C;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,aAAa;AAChB,GAFQ,EAEN,EAFM,CAAT,CAX4B,CAe5B;;AACA,QAAMA,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,MAAO,eAAX,CAAvB;;AACA,UAAI,CAACE,GAAG,CAACE,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACH;;AACD,YAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAZ,MAAAA,WAAW,CAACW,IAAD,CAAX;AACH,KAPD,CAOE,OAAOE,GAAP,EAAY;AACVX,MAAAA,QAAQ,CAACW,GAAG,CAACV,OAAJ,IAAe,0BAAhB,CAAR;AACH;AACJ,GAXD,CAhB4B,CA6B5B;;;AACA,QAAMW,YAAY,GAAG,YAAY;AAC7BZ,IAAAA,QAAQ,CAAC,EAAD,CAAR;;AAEA,QAAI,CAACT,MAAD,IAAW,CAACE,MAAZ,IAAsB,CAACE,IAA3B,EAAiC;AAC7BK,MAAAA,QAAQ,CAAC,yBAAD,CAAR;AACA;AACH;;AACD,QAAIa,KAAK,CAACpB,MAAD,CAAL,IAAiBA,MAAM,IAAI,CAA/B,EAAkC;AAC9BO,MAAAA,QAAQ,CAAC,oCAAD,CAAR;AACA;AACH;;AAED,QAAI;AACA,YAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,MAAO,eAAX,EAA2B;AAC9CW,QAAAA,MAAM,EAAE,MADsC;AAE9CC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFqC;AAG9CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE3B,UAAAA,MAAF;AAAUE,UAAAA,MAAM,EAAE0B,MAAM,CAAC1B,MAAD,CAAxB;AAAkCE,UAAAA;AAAlC,SAAf;AAHwC,OAA3B,CAAvB;;AAMA,UAAIU,GAAG,CAACE,EAAR,EAAY;AACRL,QAAAA,UAAU,CAAC,6BAAD,CAAV;AACAV,QAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,QAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,QAAAA,OAAO,CAAC,EAAD,CAAP;AACAQ,QAAAA,aAAa,GALL,CAKS;;AACjBgB,QAAAA,UAAU,CAAC,MAAMlB,UAAU,CAAC,EAAD,CAAjB,EAAuB,IAAvB,CAAV;AACH,OAPD,MAOO;AACH,cAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;AACJ,KAjBD,CAiBE,OAAOG,GAAP,EAAY;AACVX,MAAAA,QAAQ,CAACW,GAAG,CAACV,OAAJ,IAAe,uBAAhB,CAAR;AACH;AACJ,GAhCD,CA9B4B,CAgE5B;;;AACA,QAAMoB,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,CADW;AAEnBC,IAAAA,OAAO,EAAE,CAFU;AAGnBC,IAAAA,SAAS,EAAE,CAHQ;AAInBC,IAAAA,QAAQ,EAAE,CAJS;AAKnBC,IAAAA,MAAM,EAAE,CALW;AAMnBC,IAAAA,QAAQ,EAAE,CANS;AAOnBC,IAAAA,MAAM,EAAE;AAPW,GAAvB;AAUA/B,EAAAA,QAAQ,CAACgC,OAAT,CAAkBC,OAAD,IAAa;AAC1B,UAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAACnC,IAAjB,EAAuBsC,kBAAvB,CAA0C,OAA1C,EAAmD;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAnD,CAAlB;;AACA,QAAIb,cAAc,CAACU,SAAD,CAAd,KAA8BI,SAAlC,EAA6C;AACzCd,MAAAA,cAAc,CAACU,SAAD,CAAd,IAA6BD,OAAO,CAACrC,MAArC;AACH;AACJ,GALD,EA3E4B,CAkF5B;;AACA,QAAM2C,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYlB,cAAZ,CADM;AAEdmB,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,iBADX;AAEIhC,MAAAA,IAAI,EAAE6B,MAAM,CAACI,MAAP,CAAcrB,cAAd,CAFV;AAGIsB,MAAAA,WAAW,EAAE,iBAHjB;AAIIC,MAAAA,eAAe,EAAE,sBAJrB;AAKIC,MAAAA,OAAO,EAAE;AALb,KADM;AAFI,GAAlB;AAaA,sBACI;AAAK,IAAA,SAAS,EAAEnE,MAAM,CAACoE,IAAvB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEpE,MAAM,CAACqE,SAAvB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAIK9C,OAAO,iBAAI;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA,kBAA6BA;AAA7B;AAAA;AAAA;AAAA;AAAA,cAJhB,EAKKF,KAAK,iBAAI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA,kBAA4BA;AAA5B;AAAA;AAAA;AAAA;AAAA,cALd,eAQI;AACI,QAAA,SAAS,EAAErB,MAAM,CAACsE,UADtB;AAEI,QAAA,WAAW,EAAC,gBAFhB;AAGI,QAAA,KAAK,EAAEzD,MAHX;AAII,QAAA,QAAQ,EAAG0D,CAAD,IAAOzD,SAAS,CAACyD,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ9B;AAAA;AAAA;AAAA;AAAA,cARJ,eAcI;AACI,QAAA,SAAS,EAAEzE,MAAM,CAACsE,UADtB;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,WAAW,EAAC,QAHhB;AAII,QAAA,KAAK,EAAEvD,MAJX;AAKI,QAAA,QAAQ,EAAGwD,CAAD,IAAOvD,SAAS,CAACuD,CAAC,CAACC,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,cAdJ,eAqBI;AACI,QAAA,SAAS,EAAEzE,MAAM,CAACsE,UADtB;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,KAAK,EAAErD,IAHX;AAII,QAAA,QAAQ,EAAGsD,CAAD,IAAOrD,OAAO,CAACqD,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,cArBJ,eA6BI;AAAQ,QAAA,SAAS,EAAEzE,MAAM,CAAC0E,GAA1B;AAA+B,QAAA,OAAO,EAAExC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BJ,eAkCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCJ,eAmCI;AAAA;AAAA;AAAA;AAAA,cAnCJ,eAoCI;AAAK,QAAA,SAAS,EAAElC,MAAM,CAAC2E,IAAvB;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cApCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH;;GA5IuB9C,K;;KAAAA,K","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport styles from \"./style.module.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nexport default function Daily() {\r\n    const [source, setSource] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const apiUrl = \"http://localhost:8080/api\"; // Adjust based on your backend\r\n\r\n    // Fetch expenses on component mount\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, []);\r\n\r\n    // Function to fetch expenses from backend\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`);\r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch expenses\");\r\n            }\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(err.message || \"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    // Function to handle adding an expense\r\n    const handleSubmit = async () => {\r\n        setError(\"\");\r\n\r\n        if (!source || !amount || !date) {\r\n            setError(\"All fields are required\");\r\n            return;\r\n        }\r\n        if (isNaN(amount) || amount <= 0) {\r\n            setError(\"Amount should be a positive number\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ source, amount: Number(amount), date }),\r\n            });\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Expense added successfully!\");\r\n                setSource(\"\");\r\n                setAmount(\"\");\r\n                setDate(\"\");\r\n                fetchExpenses(); // Refresh data\r\n                setTimeout(() => setMessage(\"\"), 3000);\r\n            } else {\r\n                throw new Error(\"Unable to add expense\");\r\n            }\r\n        } catch (err) {\r\n            setError(err.message || \"Unable to add expense\");\r\n        }\r\n    };\r\n\r\n    // Group expenses by day of the week (Monday-Sunday)\r\n    const weeklyExpenses = {\r\n        Monday: 0,\r\n        Tuesday: 0,\r\n        Wednesday: 0,\r\n        Thursday: 0,\r\n        Friday: 0,\r\n        Saturday: 0,\r\n        Sunday: 0,\r\n    };\r\n\r\n    expenses.forEach((expense) => {\r\n        const dayOfWeek = new Date(expense.date).toLocaleDateString(\"en-US\", { weekday: \"long\" });\r\n        if (weeklyExpenses[dayOfWeek] !== undefined) {\r\n            weeklyExpenses[dayOfWeek] += expense.amount;\r\n        }\r\n    });\r\n\r\n    // Chart data dynamically updated\r\n    const chartData = {\r\n        labels: Object.keys(weeklyExpenses),\r\n        datasets: [\r\n            {\r\n                label: \"Weekly Spending\",\r\n                data: Object.values(weeklyExpenses),\r\n                borderColor: \"rgb(75,192,197)\",\r\n                backgroundColor: \"rgba(75,192,197,0.2)\",\r\n                tension: 0.4,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className={styles.full}>\r\n            <div className={styles.container}>\r\n                <h3>Daily Expense Tracker</h3>\r\n\r\n                {/* Success and error messages */}\r\n                {message && <p className=\"text-success\">{message}</p>}\r\n                {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n                {/* Input fields */}\r\n                <input\r\n                    className={styles.inputfield}\r\n                    placeholder=\"Expense Source\"\r\n                    value={source}\r\n                    onChange={(e) => setSource(e.target.value)}\r\n                />\r\n                <input\r\n                    className={styles.inputfield}\r\n                    type=\"number\"\r\n                    placeholder=\"Amount\"\r\n                    value={amount}\r\n                    onChange={(e) => setAmount(e.target.value)}\r\n                />\r\n                <input\r\n                    className={styles.inputfield}\r\n                    type=\"date\"\r\n                    value={date}\r\n                    onChange={(e) => setDate(e.target.value)}\r\n                />\r\n\r\n                {/* Submit button */}\r\n                <button className={styles.btn} onClick={handleSubmit}>\r\n                    Add Expense\r\n                </button>\r\n\r\n                {/* Expense Chart */}\r\n                <h4>Expense Chart</h4>\r\n                <br />\r\n                <div className={styles.line}>\r\n                    <Line data={chartData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}