{"ast":null,"code":"// budget.js (Backend)\nconst express = require(\"express\");\n\nconst mongoose = require(\"mongoose\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst authenticateUser = require(\"./middleware/authMiddleware\"); // Your auth middleware\n\n\nconst router = express.Router(); // BudgetPlan Schema with user_id to associate with the authenticated user\n\nconst BudgetPlanSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  total: {\n    type: Number,\n    required: true\n  },\n  spent: {\n    type: Number,\n    required: true,\n    default: 0\n  },\n  items: {\n    type: Number,\n    required: true,\n    default: 0\n  },\n  icon: {\n    type: String,\n    default: \"ðŸ’°\"\n  },\n  user_id: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  }\n});\nconst BudgetPlan = mongoose.model(\"BudgetPlan\", BudgetPlanSchema); // Create Budget Plan (only for the authenticated user)\n\nrouter.post(\"/budgetplan\", authenticateUser, async (req, res) => {\n  const {\n    name,\n    total,\n    spent,\n    items,\n    icon\n  } = req.body;\n  const userId = req.user.id; // Retrieved from auth middleware\n\n  try {\n    const newBudgetPlan = new BudgetPlan({\n      name,\n      total,\n      spent,\n      items,\n      icon,\n      user_id: userId\n    });\n    await newBudgetPlan.save();\n    res.status(201).json(newBudgetPlan);\n  } catch (error) {\n    console.error(\"Error creating budget plan:\", error);\n    res.status(500).json({\n      message: \"Failed to create budget plan\",\n      error: error.message\n    });\n  }\n}); // Get All Budget Plans for the authenticated user\n\nrouter.get(\"/budgetplan\", authenticateUser, async (req, res) => {\n  const userId = req.user.id;\n\n  try {\n    const budgetPlans = await BudgetPlan.find({\n      user_id: userId\n    }).lean();\n    res.json(budgetPlans);\n  } catch (error) {\n    console.error(\"Error fetching budget plans:\", error);\n    res.status(500).json({\n      message: \"Failed to retrieve budget plans\",\n      error: error.message\n    });\n  }\n}); // Update a Budget Plan (only if it belongs to the authenticated user)\n\nrouter.put(\"/budgetplan/:id\", authenticateUser, async (req, res) => {\n  const {\n    name,\n    total,\n    spent,\n    items,\n    icon\n  } = req.body;\n  const {\n    id\n  } = req.params;\n  const userId = req.user.id;\n\n  try {\n    const updatedBudget = await BudgetPlan.findOneAndUpdate({\n      _id: id,\n      user_id: userId\n    }, {\n      name,\n      total,\n      spent,\n      items,\n      icon\n    }, {\n      new: true\n    });\n\n    if (!updatedBudget) {\n      return res.status(404).json({\n        message: \"Budget plan not found or not authorized\"\n      });\n    }\n\n    res.json(updatedBudget);\n  } catch (error) {\n    console.error(\"Error updating budget plan:\", error);\n    res.status(500).json({\n      message: \"Failed to update budget plan\",\n      error: error.message\n    });\n  }\n}); // Delete a Budget Plan (only if it belongs to the authenticated user)\n\nrouter.delete(\"/budgetplan/:id\", authenticateUser, async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const userId = req.user.id;\n\n  try {\n    const deletedBudget = await BudgetPlan.findOneAndDelete({\n      _id: id,\n      user_id: userId\n    });\n\n    if (!deletedBudget) {\n      return res.status(404).json({\n        message: \"Budget plan not found or not authorized\"\n      });\n    }\n\n    res.json({\n      message: \"Budget plan deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting budget plan:\", error);\n    res.status(500).json({\n      message: \"Failed to delete budget plan\",\n      error: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Budgetplan/index.jsx"],"names":["express","require","mongoose","jwt","authenticateUser","router","Router","BudgetPlanSchema","Schema","name","type","String","required","total","Number","spent","default","items","icon","user_id","Types","ObjectId","ref","BudgetPlan","model","post","req","res","body","userId","user","id","newBudgetPlan","save","status","json","error","console","message","get","budgetPlans","find","lean","put","params","updatedBudget","findOneAndUpdate","_id","new","delete","deletedBudget","findOneAndDelete","module","exports"],"mappings":"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","sourcesContent":["// budget.js (Backend)\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst jwt = require(\"jsonwebtoken\");\nconst authenticateUser = require(\"./middleware/authMiddleware\"); // Your auth middleware\n\nconst router = express.Router();\n\n// BudgetPlan Schema with user_id to associate with the authenticated user\nconst BudgetPlanSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  total: { type: Number, required: true },\n  spent: { type: Number, required: true, default: 0 },\n  items: { type: Number, required: true, default: 0 },\n  icon: { type: String, default: \"ðŸ’°\" },\n  user_id: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\n});\n\nconst BudgetPlan = mongoose.model(\"BudgetPlan\", BudgetPlanSchema);\n\n// Create Budget Plan (only for the authenticated user)\nrouter.post(\"/budgetplan\", authenticateUser, async (req, res) => {\n  const { name, total, spent, items, icon } = req.body;\n  const userId = req.user.id; // Retrieved from auth middleware\n\n  try {\n    const newBudgetPlan = new BudgetPlan({\n      name,\n      total,\n      spent,\n      items,\n      icon,\n      user_id: userId,\n    });\n    await newBudgetPlan.save();\n    res.status(201).json(newBudgetPlan);\n  } catch (error) {\n    console.error(\"Error creating budget plan:\", error);\n    res.status(500).json({ message: \"Failed to create budget plan\", error: error.message });\n  }\n});\n\n// Get All Budget Plans for the authenticated user\nrouter.get(\"/budgetplan\", authenticateUser, async (req, res) => {\n  const userId = req.user.id;\n  try {\n    const budgetPlans = await BudgetPlan.find({ user_id: userId }).lean();\n    res.json(budgetPlans);\n  } catch (error) {\n    console.error(\"Error fetching budget plans:\", error);\n    res.status(500).json({ message: \"Failed to retrieve budget plans\", error: error.message });\n  }\n});\n\n// Update a Budget Plan (only if it belongs to the authenticated user)\nrouter.put(\"/budgetplan/:id\", authenticateUser, async (req, res) => {\n  const { name, total, spent, items, icon } = req.body;\n  const { id } = req.params;\n  const userId = req.user.id;\n\n  try {\n    const updatedBudget = await BudgetPlan.findOneAndUpdate(\n      { _id: id, user_id: userId },\n      { name, total, spent, items, icon },\n      { new: true }\n    );\n    if (!updatedBudget) {\n      return res.status(404).json({ message: \"Budget plan not found or not authorized\" });\n    }\n    res.json(updatedBudget);\n  } catch (error) {\n    console.error(\"Error updating budget plan:\", error);\n    res.status(500).json({ message: \"Failed to update budget plan\", error: error.message });\n  }\n});\n\n// Delete a Budget Plan (only if it belongs to the authenticated user)\nrouter.delete(\"/budgetplan/:id\", authenticateUser, async (req, res) => {\n  const { id } = req.params;\n  const userId = req.user.id;\n\n  try {\n    const deletedBudget = await BudgetPlan.findOneAndDelete({ _id: id, user_id: userId });\n    if (!deletedBudget) {\n      return res.status(404).json({ message: \"Budget plan not found or not authorized\" });\n    }\n    res.json({ message: \"Budget plan deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting budget plan:\", error);\n    res.status(500).json({ message: \"Failed to delete budget plan\", error: error.message });\n  }\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"module"}