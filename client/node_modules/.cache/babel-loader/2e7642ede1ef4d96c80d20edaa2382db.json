{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\Expense\\\\daily expense\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExpenseTracker() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const apiUrl = \"http://localhost:8080\";\n  useEffect(() => {\n    fetchExpenses();\n  }, []);\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/expenses`);\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(\"Failed to fetch expenses\");\n    }\n  };\n\n  const handleSubmit = async () => {\n    setError(\"\");\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/expense`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added\");\n        setSource(\"\");\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses();\n        setTimeout(() => setMessage(\"\"), 3000);\n      }\n    } catch (err) {\n      setError(\"Unable to add expense\");\n    }\n  }; // Group expenses by date\n\n\n  const dailyExpenses = expenses.reduce((acc, item) => {\n    const day = item.date.split(\"T\")[0];\n    acc[day] = (acc[day] || 0) + item.amount;\n    return acc;\n  }, {});\n  const chartData = {\n    labels: Object.keys(dailyExpenses),\n    datasets: [{\n      label: \"Daily Expense\",\n      data: Object.values(dailyExpenses),\n      borderColor: \"red\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Daily Expense Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-success\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Expense Source\",\n      value: source,\n      onChange: e => setSource(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Amount\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: date,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Add Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Expense Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ExpenseTracker, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = ExpenseTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseTracker\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/Expense/daily expense/index.js"],"names":["useState","useEffect","Line","ExpenseTracker","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","data","json","err","handleSubmit","method","headers","body","JSON","stringify","Number","ok","setTimeout","dailyExpenses","reduce","acc","item","day","split","chartData","labels","Object","keys","datasets","label","values","borderColor","fill","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nexport default function ExpenseTracker() {\r\n    const [source, setSource] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const apiUrl = \"http://localhost:8080\";\r\n\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, []);\r\n\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/expenses`);\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(\"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        setError(\"\");\r\n        if (!source || !amount || !date) {\r\n            setError(\"All fields are required\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${apiUrl}/expense`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ source, amount: Number(amount), date }),\r\n            });\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Expense added\");\r\n                setSource(\"\");\r\n                setAmount(\"\");\r\n                setDate(\"\");\r\n                fetchExpenses();\r\n                setTimeout(() => setMessage(\"\"), 3000);\r\n            }\r\n        } catch (err) {\r\n            setError(\"Unable to add expense\");\r\n        }\r\n    };\r\n\r\n    // Group expenses by date\r\n    const dailyExpenses = expenses.reduce((acc, item) => {\r\n        const day = item.date.split(\"T\")[0];\r\n        acc[day] = (acc[day] || 0) + item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    const chartData = {\r\n        labels: Object.keys(dailyExpenses),\r\n        datasets: [\r\n            {\r\n                label: \"Daily Expense\",\r\n                data: Object.values(dailyExpenses),\r\n                borderColor: \"red\",\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Daily Expense Tracker</h3>\r\n            {message && <p className=\"text-success\">{message}</p>}\r\n            {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n            <input placeholder=\"Expense Source\" value={source} onChange={(e) => setSource(e.target.value)} />\r\n            <input type=\"number\" placeholder=\"Amount\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n            <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\r\n            <button onClick={handleSubmit}>Add Expense</button>\r\n\r\n            <h4>Expense Chart</h4>\r\n            <Line data={chartData} />\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}