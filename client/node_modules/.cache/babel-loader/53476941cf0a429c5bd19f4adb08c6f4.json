{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\Calendar\\\\cal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [visitedDates, setVisitedDates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n\n  const currentDate = new Date(today);\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate(); // Month names for better readability\n\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const monthName = monthNames[currentMonth];\n  useEffect(() => {\n    const fetchVisitedDates = async () => {\n      try {\n        const res = await axios.get('http://localhost:8080/api/visited-dates');\n        setVisitedDates(res.data.map(visit => visit.date));\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch visited dates.');\n        console.error(err);\n        setLoading(false);\n      }\n    };\n\n    const saveVisit = async () => {\n      try {\n        await axios.post('http://localhost:8080/api/visit', {\n          date: today\n        });\n      } catch (err) {\n        console.error('Error saving visit:', err);\n      }\n    };\n\n    saveVisit();\n    fetchVisitedDates();\n  }, [today]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"head\",\n      children: \"Days Logged\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mon\",\n        children: [monthName, \"|\", currentYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [...Array(daysInMonth).keys()].map(day => {\n        const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day + 1).padStart(2, '0')}`;\n        const isToday = date === today;\n        const isVisited = visitedDates.includes(date);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `day ${isToday ? 'today' : ''} ${isVisited ? 'visited' : ''}`,\n          children: day + 1\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4H5Tyaw3f9TqafUWq3sBgz+oRDs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/Calendar/cal.jsx"],"names":["React","useEffect","useState","axios","App","visitedDates","setVisitedDates","loading","setLoading","error","setError","today","Date","toISOString","split","currentDate","currentMonth","getMonth","currentYear","getFullYear","daysInMonth","getDate","monthNames","monthName","fetchVisitedDates","res","get","data","map","visit","date","err","console","saveVisit","post","Array","keys","day","String","padStart","isToday","isVisited","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [visitedDates, setVisitedDates] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\r\n  const currentDate = new Date(today);\r\n  const currentMonth = currentDate.getMonth();\r\n  const currentYear = currentDate.getFullYear();\r\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n\r\n  // Month names for better readability\r\n  const monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n  const monthName = monthNames[currentMonth];\r\n\r\n  useEffect(() => {\r\n    const fetchVisitedDates = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:8080/api/visited-dates');\r\n        setVisitedDates(res.data.map((visit) => visit.date));\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Failed to fetch visited dates.');\r\n        console.error(err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const saveVisit = async () => {\r\n      try {\r\n        await axios.post('http://localhost:8080/api/visit', { date: today });\r\n      } catch (err) {\r\n        console.error('Error saving visit:', err);\r\n      }\r\n    };\r\n\r\n    saveVisit();\r\n    fetchVisitedDates();\r\n  }, [today]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"head\">Days Logged</h1>\r\n      <div className=\"header\">\r\n        <h2 className='mon'>{monthName}|{currentYear}</h2>\r\n      </div>\r\n      <div className=\"calendar\">\r\n        {[...Array(daysInMonth).keys()].map((day) => {\r\n          const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day + 1).padStart(2, '0')}`;\r\n          const isToday = date === today;\r\n          const isVisited = visitedDates.includes(date);\r\n\r\n          return (\r\n            <div\r\n              key={date}\r\n              className={`day ${isToday ? 'today' : ''} ${isVisited ? 'visited' : ''}`}\r\n            >\r\n              {day + 1}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}