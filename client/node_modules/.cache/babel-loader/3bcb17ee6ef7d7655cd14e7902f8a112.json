{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Function to get the start of the week (Monday)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getStartOfWeek = date => {\n  const d = new Date(date); // Ensure the date is valid before proceeding\n\n  if (isNaN(d.getTime())) {\n    console.error(\"Invalid date:\", date);\n    return null; // or return a default date if needed\n  }\n\n  const day = d.getDay() || 7; // Get day of week, Sunday is 0 so we convert it to 7\n\n  d.setDate(d.getDate() - day + 1); // Set date to the previous Monday\n\n  return d.toISOString().split(\"T\")[0]; // Return the date in 'yyyy-mm-dd' format\n};\n\nconst ExpenseTracker = () => {\n  _s();\n\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n  const [dates, setDates] = useState([]); // API URL - make sure it's correct\n\n  const apiUrl = \"http://localhost:8080\"; // Adjust this as per your backend setup\n  // Function to fetch expenses\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`); // Correct API endpoint\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Generate a week of dates from Monday to Friday\n\n\n  const generateWeekDates = startDate => {\n    const weekDates = [];\n    const startOfWeek = getStartOfWeek(startDate); // Get start of the week (Monday)\n\n    if (startOfWeek) {\n      for (let i = 0; i < 5; i++) {\n        const date = new Date(startOfWeek);\n        date.setDate(date.getDate() + i); // Increment day to get the whole week\n\n        weekDates.push(date.toISOString().split(\"T\")[0]); // Add the date in 'yyyy-mm-dd' format\n      }\n\n      setDates(weekDates);\n    }\n  };\n\n  useEffect(() => {\n    fetchExpenses(); // Fetch data on component mount\n  }, []);\n  useEffect(() => {\n    if (expenses.length > 0) {\n      // Assume the first expense has the earliest date for the week\n      const earliestDate = expenses[0].date; // Replace with actual logic if needed\n\n      generateWeekDates(earliestDate); // Generate week dates based on the earliest expense date\n    }\n  }, [expenses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Expense Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Week Dates (Mon-Fri)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseTracker, \"ICxKJ+cXiU871CyLktVj4r2sMis=\");\n\n_c = ExpenseTracker;\nexport default ExpenseTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseTracker\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["React","useState","useEffect","getStartOfWeek","date","d","Date","isNaN","getTime","console","error","day","getDay","setDate","getDate","toISOString","split","ExpenseTracker","expenses","setExpenses","setError","dates","setDates","apiUrl","fetchExpenses","res","fetch","ok","Error","data","json","err","message","generateWeekDates","startDate","weekDates","startOfWeek","i","push","length","earliestDate","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Function to get the start of the week (Monday)\r\nconst getStartOfWeek = (date) => {\r\n    const d = new Date(date);\r\n    \r\n    // Ensure the date is valid before proceeding\r\n    if (isNaN(d.getTime())) {\r\n        console.error(\"Invalid date:\", date);\r\n        return null; // or return a default date if needed\r\n    }\r\n\r\n    const day = d.getDay() || 7; // Get day of week, Sunday is 0 so we convert it to 7\r\n    d.setDate(d.getDate() - day + 1); // Set date to the previous Monday\r\n    return d.toISOString().split(\"T\")[0]; // Return the date in 'yyyy-mm-dd' format\r\n};\r\n\r\nconst ExpenseTracker = () => {\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [dates, setDates] = useState([]);\r\n    \r\n    // API URL - make sure it's correct\r\n    const apiUrl = \"http://localhost:8080\"; // Adjust this as per your backend setup\r\n\r\n    // Function to fetch expenses\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`); // Correct API endpoint\r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch expenses\");\r\n            }\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(err.message || \"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    // Generate a week of dates from Monday to Friday\r\n    const generateWeekDates = (startDate) => {\r\n        const weekDates = [];\r\n        const startOfWeek = getStartOfWeek(startDate); // Get start of the week (Monday)\r\n        if (startOfWeek) {\r\n            for (let i = 0; i < 5; i++) {\r\n                const date = new Date(startOfWeek);\r\n                date.setDate(date.getDate() + i); // Increment day to get the whole week\r\n                weekDates.push(date.toISOString().split(\"T\")[0]); // Add the date in 'yyyy-mm-dd' format\r\n            }\r\n            setDates(weekDates);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchExpenses(); // Fetch data on component mount\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (expenses.length > 0) {\r\n            // Assume the first expense has the earliest date for the week\r\n            const earliestDate = expenses[0].date; // Replace with actual logic if needed\r\n            generateWeekDates(earliestDate); // Generate week dates based on the earliest expense date\r\n        }\r\n    }, [expenses]);\r\n\r\n    return (\r\n        <div>\r\n            {error && <div>Error: {error}</div>}\r\n\r\n            <h2>Expense Tracker</h2>\r\n\r\n            <div>\r\n                <h3>Week Dates (Mon-Fri)</h3>\r\n                <ul>\r\n                    {dates.map((date, index) => (\r\n                        <li key={index}>{date}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div>\r\n                {/* Add your line graph or other visualization components here */}\r\n                {/* For simplicity, we display the week dates */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpenseTracker;\r\n"]},"metadata":{},"sourceType":"module"}