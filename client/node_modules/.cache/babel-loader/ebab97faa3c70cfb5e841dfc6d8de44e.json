{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo - Copy\\\\client\\\\src\\\\components\\\\Bargraph\\\\bargraph.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./style.module.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\"; // Register necessary ChartJS components for a Bar chart\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport default function BudgetBarChart() {\n  _s();\n\n  const [budgets, setBudgets] = useState([]);\n  const [error, setError] = useState(\"\"); // API base URL\n\n  const apiUrl = \"http://localhost:8080/api\";\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"token\");\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    };\n  };\n\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`, {\n        headers: getAuthHeaders()\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch budget data\");\n      }\n\n      const data = await res.json();\n      setBudgets(data);\n    } catch (err) {\n      setError(err.message);\n    }\n  }; // Define all possible budget categories (source names)\n\n\n  const possibleCategories = [\"transportation\", \"utilities\", \"entertainment\", \"shopping\", \"groceries\", \"other\"]; // Always show these as x-axis labels\n\n  const labels = possibleCategories; // Helper function to determine bar color based on spent and total\n\n  const getBarColor = (spent, total) => {\n    if (spent < total) return \"#28a745\"; // Green for under budget\n\n    if (spent === total) return \"#ffc107\"; // Yellow for equal to budget\n\n    return \"#dc3545\"; // Red for exceeded budget\n  }; // Build the spentData array for each category\n\n\n  const spentData = possibleCategories.map(category => {\n    const budget = budgets.find(b => b.name.toLowerCase() === category.toLowerCase());\n    return budget ? budget.spent : 0;\n  }); // Build the remainingData array.\n  // If remaining (total - spent) is negative, show the overspent amount as a positive number.\n\n  const remainingData = possibleCategories.map(category => {\n    const budget = budgets.find(b => b.name.toLowerCase() === category.toLowerCase());\n    if (!budget) return 0;\n    const rem = budget.total - budget.spent;\n    return rem < 0 ? Math.abs(rem) : rem;\n  }); // Dynamically set bar colors based on spent and total for each category\n  // For the \"Spent\" dataset, use the getBarColor function.\n\n  const spentBarColors = possibleCategories.map(category => {\n    const budget = budgets.find(b => b.name.toLowerCase() === category.toLowerCase());\n    return budget ? getBarColor(budget.spent, budget.total) : \"#28a745\"; // Default to green if no budget\n  }); // For the \"Remaining Budget\" dataset, if overspent, show red; otherwise, show gray.\n\n  const remainingBarColors = possibleCategories.map(category => {\n    const budget = budgets.find(b => b.name.toLowerCase() === category.toLowerCase());\n\n    if (budget) {\n      return budget.spent > budget.total ? \"#dc3545\" : \"#6c757d\";\n    }\n\n    return \"#6c757d\";\n  });\n  const chartData = {\n    labels,\n    datasets: [{\n      label: \"Spent\",\n      data: spentData,\n      backgroundColor: spentBarColors,\n      // Dynamic colors for spent bars\n      borderColor: spentBarColors.map(color => `${color}80`),\n      // Slightly transparent border\n      borderWidth: 1,\n      stack: \"stack1\"\n    }, {\n      label: \"Remaining Budget\",\n      data: remainingData,\n      backgroundColor: remainingBarColors,\n      // Red if overspent, otherwise gray\n      borderColor: remainingBarColors.map(color => `${color}80`),\n      borderWidth: 1,\n      stack: \"stack1\"\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // allow custom height\n    plugins: {\n      title: {\n        display: true,\n        text: \"Budget vs Spending Chart\"\n      },\n      tooltip: {\n        enabled: true,\n        callbacks: {\n          label: context => {\n            const label = context.dataset.label || \"\";\n            const value = context.raw || 0;\n            const category = labels[context.dataIndex];\n            const budget = budgets.find(b => b.name.toLowerCase() === category.toLowerCase());\n\n            if (label === \"Spent\") {\n              if (budget) {\n                if (budget.spent < budget.total) {\n                  return `${label}: ₹${value} (Under Budget)`;\n                } else if (budget.spent === budget.total) {\n                  return `${label}: ₹${value} (Budget Fully Spent)`;\n                } else {\n                  return `${label}: ₹${value} (Budget Exceeded)`;\n                }\n              }\n            }\n\n            if (label === \"Remaining Budget\") {\n              if (budget && budget.spent > budget.total) {\n                return `Overspent: ₹${Math.abs(budget.spent - budget.total)}`;\n              }\n            }\n\n            return `${label}: ₹${value}`;\n          }\n        }\n      },\n      legend: {\n        position: \"top\",\n        labels: {\n          generateLabels: chart => {\n            return [{\n              text: \"Under Budget (Green)\",\n              fillStyle: \"#28a745\",\n              strokeStyle: \"#28a745\",\n              hidden: false\n            }, {\n              text: \"Budget Fully Spent (Yellow)\",\n              fillStyle: \"#ffc107\",\n              strokeStyle: \"#ffc107\",\n              hidden: false\n            }, {\n              text: \"Budget Exceeded (Red)\",\n              fillStyle: \"#dc3545\",\n              strokeStyle: \"#dc3545\",\n              hidden: false\n            }, {\n              text: \"Remaining Budget (Gray)\",\n              fillStyle: \"#6c757d\",\n              strokeStyle: \"#6c757d\",\n              hidden: false\n            }];\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        stacked: true\n      },\n      x: {\n        stacked: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chartContainer,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error_msg,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BudgetBarChart, \"yfPInYXAidNeufkHbzV4Bm1X/Tg=\");\n\n_c = BudgetBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetBarChart\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo - Copy/client/src/components/Bargraph/bargraph.js"],"names":["useState","useEffect","styles","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","register","BudgetBarChart","budgets","setBudgets","error","setError","apiUrl","getAuthHeaders","token","localStorage","getItem","Authorization","fetchBudgets","res","fetch","headers","ok","Error","data","json","err","message","possibleCategories","labels","getBarColor","spent","total","spentData","map","category","budget","find","b","name","toLowerCase","remainingData","rem","Math","abs","spentBarColors","remainingBarColors","chartData","datasets","label","backgroundColor","borderColor","color","borderWidth","stack","chartOptions","responsive","maintainAspectRatio","plugins","title","display","text","tooltip","enabled","callbacks","context","dataset","value","raw","dataIndex","legend","position","generateLabels","chart","fillStyle","strokeStyle","hidden","scales","y","beginAtZero","stacked","x","chartContainer","error_msg","height"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport styles from \"./style.module.css\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register necessary ChartJS components for a Bar chart\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nexport default function BudgetBarChart() {\r\n  const [budgets, setBudgets] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // API base URL\r\n  const apiUrl = \"http://localhost:8080/api\";\r\n\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBudgets();\r\n  }, []);\r\n\r\n  const fetchBudgets = async () => {\r\n    try {\r\n      const res = await fetch(`${apiUrl}/budgetplan`, {\r\n        headers: getAuthHeaders(),\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(\"Failed to fetch budget data\");\r\n      }\r\n      const data = await res.json();\r\n      setBudgets(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Define all possible budget categories (source names)\r\n  const possibleCategories = [\r\n    \"transportation\",\r\n    \"utilities\",\r\n    \"entertainment\",\r\n    \"shopping\",\r\n    \"groceries\",\r\n    \"other\",\r\n  ];\r\n\r\n  // Always show these as x-axis labels\r\n  const labels = possibleCategories;\r\n\r\n  // Helper function to determine bar color based on spent and total\r\n  const getBarColor = (spent, total) => {\r\n    if (spent < total) return \"#28a745\"; // Green for under budget\r\n    if (spent === total) return \"#ffc107\"; // Yellow for equal to budget\r\n    return \"#dc3545\"; // Red for exceeded budget\r\n  };\r\n\r\n  // Build the spentData array for each category\r\n  const spentData = possibleCategories.map((category) => {\r\n    const budget = budgets.find(\r\n      (b) => b.name.toLowerCase() === category.toLowerCase()\r\n    );\r\n    return budget ? budget.spent : 0;\r\n  });\r\n\r\n  // Build the remainingData array.\r\n  // If remaining (total - spent) is negative, show the overspent amount as a positive number.\r\n  const remainingData = possibleCategories.map((category) => {\r\n    const budget = budgets.find(\r\n      (b) => b.name.toLowerCase() === category.toLowerCase()\r\n    );\r\n    if (!budget) return 0;\r\n    const rem = budget.total - budget.spent;\r\n    return rem < 0 ? Math.abs(rem) : rem;\r\n  });\r\n\r\n  // Dynamically set bar colors based on spent and total for each category\r\n  // For the \"Spent\" dataset, use the getBarColor function.\r\n  const spentBarColors = possibleCategories.map((category) => {\r\n    const budget = budgets.find(\r\n      (b) => b.name.toLowerCase() === category.toLowerCase()\r\n    );\r\n    return budget ? getBarColor(budget.spent, budget.total) : \"#28a745\"; // Default to green if no budget\r\n  });\r\n\r\n  // For the \"Remaining Budget\" dataset, if overspent, show red; otherwise, show gray.\r\n  const remainingBarColors = possibleCategories.map((category) => {\r\n    const budget = budgets.find(\r\n      (b) => b.name.toLowerCase() === category.toLowerCase()\r\n    );\r\n    if (budget) {\r\n      return budget.spent > budget.total ? \"#dc3545\" : \"#6c757d\";\r\n    }\r\n    return \"#6c757d\";\r\n  });\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Spent\",\r\n        data: spentData,\r\n        backgroundColor: spentBarColors, // Dynamic colors for spent bars\r\n        borderColor: spentBarColors.map((color) => `${color}80`), // Slightly transparent border\r\n        borderWidth: 1,\r\n        stack: \"stack1\",\r\n      },\r\n      {\r\n        label: \"Remaining Budget\",\r\n        data: remainingData,\r\n        backgroundColor: remainingBarColors, // Red if overspent, otherwise gray\r\n        borderColor: remainingBarColors.map((color) => `${color}80`),\r\n        borderWidth: 1,\r\n        stack: \"stack1\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, // allow custom height\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: \"Budget vs Spending Chart\",\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n        callbacks: {\r\n          label: (context) => {\r\n            const label = context.dataset.label || \"\";\r\n            const value = context.raw || 0;\r\n            const category = labels[context.dataIndex];\r\n            const budget = budgets.find(\r\n              (b) => b.name.toLowerCase() === category.toLowerCase()\r\n            );\r\n            if (label === \"Spent\") {\r\n              if (budget) {\r\n                if (budget.spent < budget.total) {\r\n                  return `${label}: ₹${value} (Under Budget)`;\r\n                } else if (budget.spent === budget.total) {\r\n                  return `${label}: ₹${value} (Budget Fully Spent)`;\r\n                } else {\r\n                  return `${label}: ₹${value} (Budget Exceeded)`;\r\n                }\r\n              }\r\n            }\r\n            if (label === \"Remaining Budget\") {\r\n              if (budget && budget.spent > budget.total) {\r\n                return `Overspent: ₹${Math.abs(budget.spent - budget.total)}`;\r\n              }\r\n            }\r\n            return `${label}: ₹${value}`;\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        position: \"top\",\r\n        labels: {\r\n          generateLabels: (chart) => {\r\n            return [\r\n              {\r\n                text: \"Under Budget (Green)\",\r\n                fillStyle: \"#28a745\",\r\n                strokeStyle: \"#28a745\",\r\n                hidden: false,\r\n              },\r\n              {\r\n                text: \"Budget Fully Spent (Yellow)\",\r\n                fillStyle: \"#ffc107\",\r\n                strokeStyle: \"#ffc107\",\r\n                hidden: false,\r\n              },\r\n              {\r\n                text: \"Budget Exceeded (Red)\",\r\n                fillStyle: \"#dc3545\",\r\n                strokeStyle: \"#dc3545\",\r\n                hidden: false,\r\n              },\r\n              {\r\n                text: \"Remaining Budget (Gray)\",\r\n                fillStyle: \"#6c757d\",\r\n                strokeStyle: \"#6c757d\",\r\n                hidden: false,\r\n              },\r\n            ];\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        stacked: true,\r\n      },\r\n      x: {\r\n        stacked: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={styles.chartContainer}>\r\n      {error && <p className={styles.error_msg}>{error}</p>}\r\n      {/* Wrap the Bar chart in a div with a fixed height */}\r\n      <div style={{ height: \"400px\" }}>\r\n        <Bar data={chartData} options={chartOptions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}