{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\expo\\\\client\\\\src\\\\components\\\\dailyexpense\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Daily() {\n  _s();\n\n  const [source, setSource] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const apiUrl = \"http://localhost:8080\"; // Update with your backend URL\n  // Fetching expenses when the component mounts\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []); // Function to fetch expenses from the backend\n\n  const fetchExpenses = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`); // Match the backend endpoint\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n\n      const data = await res.json();\n      setExpenses(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch expenses\");\n    }\n  }; // Function to handle adding an expense\n\n\n  const handleSubmit = async () => {\n    setError(\"\"); // Reset any previous errors\n    // Validate inputs\n\n    if (!source || !amount || !date) {\n      setError(\"All fields are required\");\n      return;\n    }\n\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Amount should be a positive number\");\n      return;\n    }\n\n    try {\n      const res = await fetch(`${apiUrl}/dailyexpense`, {\n        // Match the backend endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          source,\n          amount: Number(amount),\n          date\n        })\n      });\n\n      if (res.ok) {\n        setMessage(\"Expense added successfully!\");\n        setSource(\"\"); // Clear the input fields\n\n        setAmount(\"\");\n        setDate(\"\");\n        fetchExpenses(); // Refresh the expense list\n\n        setTimeout(() => setMessage(\"\"), 3000); // Clear the success message after 3 seconds\n      } else {\n        throw new Error(\"Unable to add expense\");\n      }\n    } catch (err) {\n      setError(err.message || \"Unable to add expense\");\n    }\n  }; // Function to get the start of the week (Monday)\n\n\n  const getStartOfWeek = date => {\n    const d = new Date(date);\n    const day = d.getDay() || 7; // Get day of week, Sunday is 0 so we convert it to 7\n\n    d.setDate(d.getDate() - day + 1); // Set date to the previous Monday\n\n    return d.toISOString().split(\"T\")[0]; // Return the date in 'yyyy-mm-dd' format\n  }; // Group expenses by date\n\n\n  const dailyExpenses = expenses.reduce((acc, item) => {\n    const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\n\n    acc[day] = (acc[day] || 0) + item.amount;\n    return acc;\n  }, {}); // Get the earliest date in the expenses\n\n  const earliestDate = Object.keys(dailyExpenses).sort()[0]; // Earliest date first\n  // Generate a week (Monday to Friday) for the graph, starting from the earliest date\n\n  const startOfWeek = getStartOfWeek(earliestDate);\n  const daysOfWeek = Array.from({\n    length: 5\n  }, (_, index) => {\n    const day = new Date(startOfWeek);\n    day.setDate(day.getDate() + index); // Generate the dates from Monday to Friday\n\n    return day.toISOString().split(\"T\")[0]; // Return each date in 'yyyy-mm-dd' format\n  }); // Fill in the missing dates with 0 amount\n\n  const completeExpenses = daysOfWeek.map(day => {\n    return dailyExpenses[day] || 0;\n  }); // Chart data to display daily expenses\n\n  const chartData = {\n    labels: daysOfWeek,\n    datasets: [{\n      label: \"Daily Expense\",\n      data: completeExpenses,\n      borderColor: \"red\",\n      fill: false,\n      pointStyle: \"circle\",\n      // Show dots\n      pointRadius: 5 // Set the size of the dots\n\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Daily Expense Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-success\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field\",\n      placeholder: \"Expense Source\",\n      value: source,\n      onChange: e => setSource(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field\",\n      type: \"number\",\n      placeholder: \"Amount\",\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field\",\n      type: \"date\",\n      value: date,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: handleSubmit,\n      children: \"Add Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Expense Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Daily, \"dV9s18tHohNs5OfSFV8oRhi/C14=\");\n\n_c = Daily;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daily\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/expo/client/src/components/dailyexpense/index.jsx"],"names":["useState","useEffect","Line","Daily","source","setSource","amount","setAmount","date","setDate","expenses","setExpenses","error","setError","message","setMessage","apiUrl","fetchExpenses","res","fetch","ok","Error","data","json","err","handleSubmit","isNaN","method","headers","body","JSON","stringify","Number","setTimeout","getStartOfWeek","d","Date","day","getDay","getDate","toISOString","split","dailyExpenses","reduce","acc","item","earliestDate","Object","keys","sort","startOfWeek","daysOfWeek","Array","from","length","_","index","completeExpenses","map","chartData","labels","datasets","label","borderColor","fill","pointStyle","pointRadius","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nexport default function Daily() {\r\n    const [source, setSource] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const apiUrl = \"http://localhost:8080\"; // Update with your backend URL\r\n\r\n    // Fetching expenses when the component mounts\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, []);\r\n\r\n    // Function to fetch expenses from the backend\r\n    const fetchExpenses = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`); // Match the backend endpoint\r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch expenses\");\r\n            }\r\n            const data = await res.json();\r\n            setExpenses(data);\r\n        } catch (err) {\r\n            setError(err.message || \"Failed to fetch expenses\");\r\n        }\r\n    };\r\n\r\n    // Function to handle adding an expense\r\n    const handleSubmit = async () => {\r\n        setError(\"\"); // Reset any previous errors\r\n        // Validate inputs\r\n        if (!source || !amount || !date) {\r\n            setError(\"All fields are required\");\r\n            return;\r\n        }\r\n        if (isNaN(amount) || amount <= 0) {\r\n            setError(\"Amount should be a positive number\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${apiUrl}/dailyexpense`, { // Match the backend endpoint\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ source, amount: Number(amount), date }),\r\n            });\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Expense added successfully!\");\r\n                setSource(\"\"); // Clear the input fields\r\n                setAmount(\"\");\r\n                setDate(\"\");\r\n                fetchExpenses(); // Refresh the expense list\r\n                setTimeout(() => setMessage(\"\"), 3000); // Clear the success message after 3 seconds\r\n            } else {\r\n                throw new Error(\"Unable to add expense\");\r\n            }\r\n        } catch (err) {\r\n            setError(err.message || \"Unable to add expense\");\r\n        }\r\n    };\r\n\r\n    // Function to get the start of the week (Monday)\r\n    const getStartOfWeek = (date) => {\r\n        const d = new Date(date);\r\n        const day = d.getDay() || 7; // Get day of week, Sunday is 0 so we convert it to 7\r\n        d.setDate(d.getDate() - day + 1); // Set date to the previous Monday\r\n        return d.toISOString().split(\"T\")[0]; // Return the date in 'yyyy-mm-dd' format\r\n    };\r\n\r\n    // Group expenses by date\r\n    const dailyExpenses = expenses.reduce((acc, item) => {\r\n        const day = item.date.split(\"T\")[0]; // Extracting the date part (yyyy-mm-dd)\r\n        acc[day] = (acc[day] || 0) + item.amount;\r\n        return acc;\r\n    }, {});\r\n\r\n    // Get the earliest date in the expenses\r\n    const earliestDate = Object.keys(dailyExpenses).sort()[0]; // Earliest date first\r\n\r\n    // Generate a week (Monday to Friday) for the graph, starting from the earliest date\r\n    const startOfWeek = getStartOfWeek(earliestDate);\r\n    const daysOfWeek = Array.from({ length: 5 }, (_, index) => {\r\n        const day = new Date(startOfWeek);\r\n        day.setDate(day.getDate() + index); // Generate the dates from Monday to Friday\r\n        return day.toISOString().split(\"T\")[0]; // Return each date in 'yyyy-mm-dd' format\r\n    });\r\n\r\n    // Fill in the missing dates with 0 amount\r\n    const completeExpenses = daysOfWeek.map((day) => {\r\n        return dailyExpenses[day] || 0;\r\n    });\r\n\r\n    // Chart data to display daily expenses\r\n    const chartData = {\r\n        labels: daysOfWeek,\r\n        datasets: [\r\n            {\r\n                label: \"Daily Expense\",\r\n                data: completeExpenses,\r\n                borderColor: \"red\",\r\n                fill: false,\r\n                pointStyle: \"circle\", // Show dots\r\n                pointRadius: 5, // Set the size of the dots\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Daily Expense Tracker</h3>\r\n\r\n            {/* Display success message */}\r\n            {message && <p className=\"text-success\">{message}</p>}\r\n\r\n            {/* Display error message */}\r\n            {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n            {/* Input fields for source, amount, and date */}\r\n            <input\r\n                className=\"input-field\"\r\n                placeholder=\"Expense Source\"\r\n                value={source}\r\n                onChange={(e) => setSource(e.target.value)}\r\n            />\r\n            <input\r\n                className=\"input-field\"\r\n                type=\"number\"\r\n                placeholder=\"Amount\"\r\n                value={amount}\r\n                onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n            <input\r\n                className=\"input-field\"\r\n                type=\"date\"\r\n                value={date}\r\n                onChange={(e) => setDate(e.target.value)}\r\n            />\r\n\r\n            {/* Submit button */}\r\n            <button className=\"button\" onClick={handleSubmit}>\r\n                Add Expense\r\n            </button>\r\n\r\n            {/* Chart showing daily expenses */}\r\n            <h4>Expense Chart</h4>\r\n            <br />\r\n            <Line data={chartData} />\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}