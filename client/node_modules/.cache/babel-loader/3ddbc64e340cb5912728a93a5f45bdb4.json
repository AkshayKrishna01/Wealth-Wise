{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aishwarya\\\\Desktop\\\\PRACTICE\\\\newwexpo\\\\expo\\\\client\\\\src\\\\components\\\\Bargraph\\\\bargraph.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\"; // Register the necessary Chart.js components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nexport default function BudgetChart() {\n  _s();\n\n  const [budgets, setBudgets] = useState([]);\n  const apiUrl = \"http://localhost:8080/api\"; // Your backend URL\n\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const res = await fetch(`${apiUrl}/budgetplan`);\n\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n\n      const budgetData = await res.json();\n      console.log(\"Budget Data:\", budgetData); // Debugging log\n\n      setBudgets(budgetData);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n    }\n  }; // Process the budget data\n\n\n  const labels = budgets.map(budget => budget.name); // Budget names as labels\n\n  const budgetData = budgets.map(budget => budget.total); // Total budget for each category\n\n  const expenseData = budgets.map(budget => budget.spent); // Amount spent for each category\n\n  const chartData = {\n    labels,\n    datasets: [{\n      label: \"Budget\",\n      data: budgetData,\n      backgroundColor: \"#ffeb99\",\n      // Light yellow for budget\n      borderColor: \"#ffcc00\",\n      // Dark yellow for border\n      borderWidth: 1,\n      stack: \"stack1\" // Stack group for budget\n\n    }, {\n      label: \"Spending\",\n      data: expenseData,\n      backgroundColor: \"#ffcc00\",\n      // Dark yellow for spending\n      borderColor: \"#e6a800\",\n      // Even darker yellow for border\n      borderWidth: 1,\n      stack: \"stack1\",\n      // Stack group for spending\n      zIndex: 1 // Ensures spending appears above budget\n\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Budget vs Spending\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: \"Budget vs Spending Chart\"\n          },\n          tooltip: {\n            enabled: true\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            stacked: true // Enable stacking on Y-axis\n\n          },\n          x: {\n            stacked: true // Enable stacking on X-axis\n\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BudgetChart, \"KdS2yWDZJg1XzKRyzSFUQfgPqSk=\");\n\n_c = BudgetChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetChart\");","map":{"version":3,"sources":["C:/Users/Aishwarya/Desktop/PRACTICE/newwexpo/expo/client/src/components/Bargraph/bargraph.js"],"names":["useState","useEffect","Bar","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","register","BudgetChart","budgets","setBudgets","apiUrl","fetchBudgets","res","fetch","ok","Error","budgetData","json","console","log","err","error","labels","map","budget","name","total","expenseData","spent","chartData","datasets","label","data","backgroundColor","borderColor","borderWidth","stack","zIndex","responsive","plugins","title","display","text","tooltip","enabled","scales","y","beginAtZero","stacked","x"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS } from \"chart.js\";\r\nimport { BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\n\r\n// Register the necessary Chart.js components\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nexport default function BudgetChart() {\r\n    const [budgets, setBudgets] = useState([]);\r\n    const apiUrl = \"http://localhost:8080/api\"; // Your backend URL\r\n\r\n    useEffect(() => {\r\n        fetchBudgets();\r\n    }, []);\r\n\r\n    const fetchBudgets = async () => {\r\n        try {\r\n            const res = await fetch(`${apiUrl}/budgetplan`);\r\n            \r\n            if (!res.ok) {\r\n                throw new Error(\"Failed to fetch data\");\r\n            }\r\n            \r\n            const budgetData = await res.json();\r\n            console.log(\"Budget Data:\", budgetData); // Debugging log\r\n\r\n            setBudgets(budgetData);\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err);\r\n        }\r\n    };\r\n\r\n    // Process the budget data\r\n    const labels = budgets.map((budget) => budget.name); // Budget names as labels\r\n    const budgetData = budgets.map((budget) => budget.total); // Total budget for each category\r\n    const expenseData = budgets.map((budget) => budget.spent); // Amount spent for each category\r\n\r\n    const chartData = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: \"Budget\",\r\n                data: budgetData,\r\n                backgroundColor: \"#ffeb99\", // Light yellow for budget\r\n                borderColor: \"#ffcc00\",     // Dark yellow for border\r\n                borderWidth: 1,\r\n                stack: \"stack1\", // Stack group for budget\r\n            },\r\n            {\r\n                label: \"Spending\",\r\n                data: expenseData,\r\n                backgroundColor: \"#ffcc00\", // Dark yellow for spending\r\n                borderColor: \"#e6a800\",     // Even darker yellow for border\r\n                borderWidth: 1,\r\n                stack: \"stack1\", // Stack group for spending\r\n                zIndex: 1, // Ensures spending appears above budget\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Budget vs Spending</h3>\r\n            <Bar data={chartData} options={{\r\n                responsive: true,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: \"Budget vs Spending Chart\",\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                    }\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        stacked: true, // Enable stacking on Y-axis\r\n                    },\r\n                    x: {\r\n                        stacked: true, // Enable stacking on X-axis\r\n                    },\r\n                },\r\n            }} />\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}